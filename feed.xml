<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE xsl:stylesheet [<!ENTITY mdash "&#x2014;">]>
<feed xmlns="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://www.creativenightly.com</link>
    <link type="application/atom+xml" href="http://www.creativenightly.com/feed.xml" rel="self"/>
    <link type="text/html" href="http://www.creativenightly.com" rel="alternate"/>
    <description></description>
    <language>en-gb</language>
    <pubDate>Fri, 26 Feb 2016 15:24:13 +0000</pubDate>
    <lastBuildDate>Fri, 26 Feb 2016 15:24:13 +0000</lastBuildDate>
    <updated>2016-02-26T15:24:13+00:00</updated>

    
    
    <item>
      <title>Slushie, the pre-packaged gulp pipeline that just works</title>
      <link>http://www.creativenightly.com/2016/02/Slushie-the-pre-packaged-gulp-pipeline/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2016/02/Slushie-the-pre-packaged-gulp-pipeline</guid>
      <description><p>A few days ago, I was working on a development pipeline tool for the Live team at BBC Sport. A tool that will essentially hook into their existing development pipeline, and provide a <em>pre-opinionated</em> workflow for processing <code class="highlighter-rouge">Sass</code> files. It’s a fairly simple concept, but one that would hopefully give the front-end architects a chance to define a set of development rules in one place, and iterate on it, that the rest of the developers can leverage without having to worry about any finer details.</p>

<!--more-->

<p>We have a lot of developers on the team that don’t want to have to worry about setting up a pipeline to handle Sass files for each and every component that is created—it’s a detail that the championing front-end developers should take care of.</p>

<p>I have a tendency to write my pipeline tasks as simple functions, import them into a main file and <em>then</em> apply the gulp magic. It’s a lot cleaner than faffing around with importing gulp tasks and sharing objects across files. It’s also something I realised that not a lot of people are aware is possible. I’ve seen countless articles online of people trying to split their gulpfiles up, but doing it in the messiest of ways, and using plugins in order to try and achieve it. <strong><em>Plugins!</em></strong> Just to split a file up! It’s just JavaScript! Bonkers!</p>

<p>Then it hit me.</p>

<p>I could package up an entire gulp build pipeline in a similar way, that anyone could install it with npm, create a <strong><em>very</em></strong> barebones gulpfile, and leverage all the commands in the package for free! Absolutely free!</p>

<p>The config could be overridden wherever necessary to fit the user’s needs, and boom! No need to setup a project or clone a boilerplate project/gulpfile down each time you setup. Just add a spot of water, and you’re ready to go!</p>

<p>This is where <a href="https://github.com/kingscooty/slushie" target="\_blank">Slushie</a> was born!</p>

<div class="highlighter-rouge"><pre class="highlight"><code>npm install -g gulp
npm install slushie --save-dev
</code></pre>
</div>

<p>Create a <code class="highlighter-rouge">gulpfile.js</code> file in the base of your project, and add the following:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">slushie</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'slushie'</span><span class="p">);</span>
<span class="nx">slushie</span><span class="p">();</span>
</code></pre>
</div>

<p>You should now be able to run <code class="highlighter-rouge">gulp</code>, <code class="highlighter-rouge">gulp watch</code>, <code class="highlighter-rouge">gulp build:production</code>, and the tasks will automagically run! By default these tasks will look for any <code class="highlighter-rouge">.scss</code> files in the project, and output them into <code class="highlighter-rouge">/public</code>. The default config can be found <a href="https://github.com/KingScooty/slushie/blob/master/defaults.js" target="\_blank">here</a>, and can be overridden by simply making changes to the <code class="highlighter-rouge">water</code> <em>(config)</em> object in your <code class="highlighter-rouge">gulpfile</code>;</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">slushie</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'slushie'</span><span class="p">);</span>
<span class="c1">// Override defaults here. It's as easy as just adding a drop of water!</span>
<span class="kd">var</span> <span class="nx">water</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">sass_development</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">source</span><span class="p">:</span> <span class="p">[</span>
      <span class="s1">'app/assets/scss/**/*.scss'</span><span class="p">,</span>
      <span class="s1">'!app/assets/scss/**/_*.scss'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">destination</span><span class="p">:</span> <span class="s1">'./app/assets/css'</span>
  <span class="p">}</span>
<span class="p">};</span>
<span class="nx">slushie</span><span class="p">(</span><span class="nx">water</span><span class="p">);</span>
</code></pre>
</div>

<p>It’s still an early concept, and for that reason, only Sass related tasks are bundled for now. However, these Sass related tasks cover the entire workflow of development and output for production. The tasks include:</p>

<ul>
  <li>Development
    <ul>
      <li>Linting</li>
      <li>Sourcemaps</li>
      <li>Autoprefixing</li>
      <li>Watch</li>
    </ul>
  </li>
  <li>Production
    <ul>
      <li>Linting</li>
      <li>Autoprefixing</li>
      <li>Optimisation <em>(Sorting, removing duplicates etc.)</em></li>
      <li>Minification</li>
    </ul>
  </li>
</ul>

<p>I’m keen to give it a test drive, and I’d really like whoever reads this to give it a go, and provide feedback in the comments, and on the <a href="https://github.com/kingscooty/slushie/issues" target="\_blank">github issues</a> page. Feature requests and pull requests are definitely welcome too!</p>

<p>Slushie might be a silly idea, but I’ve not seen this done before, and I know it will save me a lot of time getting a simple pipeline setup without having to toy with boilerplate, and I’m sure there’s a lot of you out there that feel the same!</p>

<!--
The idea is to create a re-packaged pipeline that requires very little config and setting up by the end user to get going. No boilerplate, no nothing. Npm install, add 3 lines to a file, and boom! You're off!
-->
</description>
    </item>
    
    
    
    <item>
      <title>How to lint your Sass/CSS properly with Stylelint</title>
      <link>http://www.creativenightly.com/2016/02/How-to-lint-your-css-with-stylelint/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2016/02/How-to-lint-your-css-with-stylelint</guid>
      <description><p>Stylesheet linting. Not many people do it. Many more people should—especially diverse teams that have a lot of hands touching the codebase.</p>

<p>In this article I’m going to talk about <em>why</em> we should lint our stylesheets, and <em>how</em> to implement stylesheet linting into our build pipelines for both vanilla CSS and Sass.</p>

<!--more-->

<p>Table of contents:</p>

<ol>
  <li><a href="#introduction">Introduction</a>
    <ol>
      <li><a href="#what-is-linting">What is linting?</a></li>
      <li><a href="#why-should-we-lint-our-stylesheets">Why should we lint our stylesheets?</a></li>
      <li><a href="#introducing-stylelint">Introducing Stylelint</a></li>
    </ol>
  </li>
  <li><a href="#setup">Setup</a>
    <ol>
      <li><a href="#how-to-lint-your-css">How to lint your CSS</a></li>
      <li><a href="#how-to-lint-your-sass">How to lint your Sass</a></li>
    </ol>
  </li>
  <li><a href="#extending-stylelint-with-plugins">Extending Stylelint with plugins</a>
    <ol>
      <li><a href="#case-study-linting-in-practice">Case study: Linting in practice</a></li>
    </ol>
  </li>
</ol>

<hr />

<h2 id="introduction">Introduction</h2>

<h3 id="what-is-linting">What is linting?</h3>

<p>Linting is the process of checking the source code for Programmatic as well as Stylistic errors. This is most helpful in identifying some common and uncommon mistakes that are made during coding. They’re essentially a spell checker for programming languages. While linting is useful when working alone, they really pay dividends when working in teams: where many (careless) hands touch the code.</p>

<p>A Lint—or a Linter—is a program or tool that supports linting (verifying code quality). They are available for most languages like C, Python, JavaScript, CSS,  etc.</p>

<h3 id="why-should-we-lint-our-stylesheets">Why should we lint our stylesheets?</h3>

<p>There are many reasons to lint stylesheets. It maintains code consistency, it highlights errors in the codebase, it helps reduce unnecessary code, and it also helps prevent lazy coding.</p>

<p>Let’s take a look at a couple of examples.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.no-space-after-colon</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span><span class="nb">block</span><span class="p">;</span>
<span class="p">}</span>           <span class="err">⬆</span>

<span class="nc">.no-semicolon</span> <span class="p">{</span>
    <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span> <span class="err">⬅</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Linters are very good at spotting stylistic issues like these. Setting up stylistic linting rules aren’t essential, but they help keep the code consistent. Also, I don’t know about you, but these 2 stylistic errors above are a pet peeve of mine.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.invalid-hex</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="m">#FFF00</span><span class="n">G</span><span class="p">;</span>
<span class="p">}</span>                <span class="err">⬆</span>
</code></pre>
</div>

<p>They’re also very good at spotting errors like invalid hex colours, which may have resulted from a type error. Errors like this are capable of breaking important visual styling if not caught.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.unnecessary-prefixes</span> <span class="p">{</span>
    <span class="nl">-webkit-border-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
    <span class="nl">-moz-border-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
    <span class="nl">border-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>There are a fair few CSS3 rules that don’t need to be prefixed anymore in order to work. Linting spots these rules and helps to remove unnecessary and deprecated code. Linting prefixes is especially useful when paired with <a href="https://github.com/postcss/autoprefixer" target="\_blank">Autoprefixer</a>—this lets you remove all prefixes, and only insert the ones you require for your target audience.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.duplicate-rule</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
    <span class="nl">transition</span><span class="p">:</span> <span class="n">opacity</span> <span class="m">.2s</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="m">#444</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="m">#eee</span><span class="p">;</span>
    <span class="nl">transition</span><span class="p">:</span> <span class="n">background-color</span> <span class="m">.4s</span><span class="p">;</span> <span class="err">⬅</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Duplicate rules are a common form of erroneous code. What if the developer meant for both opacity <em>and</em> background-colour to be transitioned? In the case above, the opacity transition is lost. Linting would highlight this error.</p>

<p>Convinced yet? If you’re not, keep reading…</p>

<h3 id="introducing-stylelint">Introducing Stylelint</h3>

<p><a href="http://stylelint.io/" target="\_blank">Stylelint</a> is a super extendable, and unopinionated CSS linter written in JavaScript. It’s the latest and greatest in CSS linting. It supports the latest CSS syntax, understands <em>CSS-like</em> syntaxes, and is extendable with plugins. What’s more, because it’s powered by JavaScript instead of Ruby, it’s much, <em>much</em> faster than <a href="https://github.com/brigade/scss-lint" target="\_blank">scss-lint</a>.</p>

<blockquote>
  <p>Stylelint is a mighty, modern CSS linter that helps you enforce consistent conventions and avoid errors in your stylesheets.</p>
</blockquote>

<p>The linter is powered by <a href="https://github.com/postcss/postcss" target="\_blank">PostCSS</a>, so it understands any syntax that PostCSS can parse, including SCSS.</p>

<blockquote>
  <p>PostCSS is a tool for transforming styles with JS plugins. These plugins can lint your CSS, support variables and mixins, transpile future CSS syntax, inline images, and more.</p>
</blockquote>

<p>The mantra of PostCSS is do one thing, and one thing well; so it’s all about plugins. There’s currently more than 200 plugins available for PostCSS, and because they’re all written in JavaScript, they run <em>rapid fast</em>!</p>

<p>PostCSS and Stylelint are what we’ll be using to lint our stylesheets in the next section.</p>

<h2 id="setup">Setup</h2>

<h3 id="stylelint-config-files">Stylelint config files</h3>

<p>The beauty of Stylelint is how unopinionated it is. You build your own ruleset from the ground up, so it can be as opinionated or unopinionated as you choose—you don’t have to spend time disabling rules you don’t want in order to get started.</p>

<p>The <a href="https://github.com/stylelint/stylelint/blob/master/docs/user-guide/rules.md" target="\_blank">Stylelint rule documentation</a> is a good primer for getting started. They also provide a <a href="https://github.com/stylelint/stylelint-config-standard/blob/master/index.js" target="\_blank">stylelint standard config file</a> for you to use in your projects that is rather well thought out.</p>

<p>For us getting started though, we’re going to use a nice and compact config file that covers the bare essentials. Personally, I think it’s a better starting config than the one Stylelint provide, as it gives you space to build on top of it, rather than having to disable the rules you don’t want.</p>

<p>It looks something like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="s2">"rules"</span><span class="err">:</span> <span class="p">{</span>
  <span class="s2">"block-no-empty"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"color-no-invalid-hex"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"declaration-colon-space-after"</span><span class="err">:</span> <span class="s2">"always"</span><span class="p">,</span>
  <span class="s2">"declaration-colon-space-before"</span><span class="err">:</span> <span class="s2">"never"</span><span class="p">,</span>
  <span class="s2">"function-comma-space-after"</span><span class="err">:</span> <span class="s2">"always"</span><span class="p">,</span>
  <span class="s2">"function-url-quotes"</span><span class="err">:</span> <span class="s2">"double"</span><span class="p">,</span>
  <span class="s2">"media-feature-colon-space-after"</span><span class="err">:</span> <span class="s2">"always"</span><span class="p">,</span>
  <span class="s2">"media-feature-colon-space-before"</span><span class="err">:</span> <span class="s2">"never"</span><span class="p">,</span>
  <span class="s2">"media-feature-name-no-vendor-prefix"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"max-empty-lines"</span><span class="err">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="s2">"number-leading-zero"</span><span class="err">:</span> <span class="s2">"never"</span><span class="p">,</span>
  <span class="s2">"number-no-trailing-zeros"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"property-no-vendor-prefix"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"rule-no-duplicate-properties"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"declaration-block-no-single-line"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"rule-trailing-semicolon"</span><span class="err">:</span> <span class="s2">"always"</span><span class="p">,</span>
  <span class="s2">"selector-list-comma-space-before"</span><span class="err">:</span> <span class="s2">"never"</span><span class="p">,</span>
  <span class="s2">"selector-list-comma-newline-after"</span><span class="err">:</span> <span class="s2">"always"</span><span class="p">,</span>
  <span class="s2">"selector-no-id"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"string-quotes"</span><span class="err">:</span> <span class="s2">"double"</span><span class="p">,</span>
  <span class="s2">"value-no-vendor-prefix"</span><span class="err">:</span> <span class="kc">true</span>
<span class="p">}</span>
</code></pre>
</div>

<p>I recommend reading through the <a href="https://github.com/stylelint/stylelint/blob/master/docs/user-guide/rules.md" target="\_blank">Stylelint rule documentation</a> and building on this to create your ideal linting configuration. For now, let’s get into setting up our pipeline using these rules.</p>

<h3 id="how-to-lint-your-css">How to lint your CSS</h3>

<p>Let’s start with linting vanilla CSS stylesheets. You’ll be amazed at how easy it is to setup! The tools you’ll need to install <code class="highlighter-rouge">gulp-postcss</code>, <code class="highlighter-rouge">postcss-reporter</code>, and <code class="highlighter-rouge">stylelint</code>. Let’s do that now.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>npm install gulp-postcss postcss-reporter stylelint --save-dev
</code></pre>
</div>

<p>And this is the gulpfile to wire it all together:</p>

<noscript><pre>400: Invalid request
</pre></noscript>
<script src="https://gist.github.com/21d6fc030174cd41b2e4.js"> </script>

<p>How easy was that?! I make that 50 lines of code—including linting rules and imports. Make sure to update the source locations to match the ones in your project!</p>

<p>What’s even more amazing, is only a single line of code needs to be modified in order to enable Sass support! Let’s cover that now…</p>

<h3 id="how-to-lint-your-sass">How to lint your Sass</h3>

<p>Linting Sass files is super easy with PostCSS. The only difference between linting CSS and Scss, is you need to make PostCSS understand the <code class="highlighter-rouge">.Scss</code> syntax, and that’s as easy as installing <code class="highlighter-rouge">postcss-scss</code>, and changing one line in the task above.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>npm install postcss-scss --save-dev
</code></pre>
</div>

<div class="highlighter-rouge"><pre class="highlight"><code>  <span class="c1">//[...]</span>

  <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span>
      <span class="p">[</span><span class="s1">'app/assets/css/**/*.scss'</span><span class="p">,</span>
      <span class="s1">'!app/assets/css/vendor/**/*.scss'</span><span class="p">]</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">postcss</span><span class="p">(</span><span class="nx">processors</span><span class="p">,</span> <span class="p">{</span><span class="na">syntax</span><span class="p">:</span> <span class="nx">syntax_scss</span><span class="p">}));</span> <span class="err">⬅</span>
<span class="p">});</span>
</code></pre>
</div>

<p>Here’s the gulpfile in full for linting Sass files:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>npm install gulp-postcss postcss-reporter stylelint postcss-scss --save-dev
</code></pre>
</div>

<noscript><pre>400: Invalid request
</pre></noscript>
<script src="https://gist.github.com/fa4aab7852dd30feb573.js"> </script>

<p>So, <em>so</em> easy! And that’s it! You can now lint both CSS and Sass files!</p>

<p>Keep on reading if you want to know about extending Stylelint with plugins, and <em>why</em> you’d want to do that, by going through a case study.</p>

<h2 id="extending-stylelint-with-plugins">Extending Stylelint with plugins</h2>

<p>Just like PostCSS, Stylelint is extendable via plugins, which is awesome!</p>

<p>Let’s run through a quick scenario where linting would help improve code readability, and help kick lazy devs up the butt when they try and hack an easy win into the codebase.</p>

<h3 id="case-study-linting-in-practice">Case Study: Linting in practice</h3>

<h4 id="the-project-manager-who-likes-to-code">The project manager who likes to code</h4>

<p>How about this for a scenario. A project manager is managing a new web app that’s in development, and decides—in order to free up some valuable dev time on the project—to have a go at adding a feature. The feature is to add a box shadow to the hover state of a component, and to also add a hover state to the links of a child component.</p>

<p><em>What’s the worst that could happen?</em></p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">project manager: i know enough coding to be dangerous<br /><br />*winks*<br /><br />literally ruins entire codebase</p>&mdash; I Am Devloper (@iamdevloper) <a href="https://twitter.com/iamdevloper/status/696692323703336960">February 8, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Here is the code that the project manager adds to the project:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.component</span> <span class="err">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="err">;</span>
  <span class="c1">//[...]
</span>
  <span class="k">&amp;</span><span class="nd">:hover</span> <span class="err">{</span> <span class="err">⬅</span>
    <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">5px</span> <span class="m">0px</span> <span class="nf">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="mi">.75</span><span class="p">)</span><span class="err">;</span>

    <span class="nc">.component__child</span> <span class="err">{</span> <span class="err">⬅</span>
      <span class="nt">ul</span> <span class="err">{</span> <span class="err">⬅</span>
        <span class="nt">li</span> <span class="err">{</span> <span class="err">⬅</span>
          <span class="nt">a</span> <span class="err">{</span> <span class="err">⬅</span>
            <span class="k">&amp;</span><span class="nd">:hover</span> <span class="err">{</span> <span class="err">⬅</span>
              <span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">underline</span><span class="err">;</span>
            <span class="err">}</span>
          <span class="err">}</span>
        <span class="err">}</span>
      <span class="err">}</span>
    <span class="err">}</span>
  <span class="err">}</span>
<span class="err">}</span>
</code></pre>
</div>

<p>Yuck!</p>

<h4 id="selector-nesting-in-sass-is-bad---use-a-linter">Selector nesting in Sass is bad—use a linter!</h4>

<p>Selector nesting is a necessary evil when developing using Sass; it’s really useful when used properly, and a one way trip to <a href="https://css-tricks.com/specifics-on-css-specificity/" target="\_blank">specificity</a> hell if abused. Nesting is normally the result of lazy coding—and lazy coding results in code that is hard to read, and poorly written. The first <code class="highlighter-rouge">&amp;:hover{...}</code> rule could be 10 lines below the parent component definition, making it really hard to decipher what it belongs to. However, more importantly, there nesting here is completely unnecessary.</p>

<p>This the CSS that the above rule compiles to:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.component</span><span class="nd">:hover</span> <span class="nc">.component_child</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="nt">a</span><span class="nd">:hover</span> <span class="p">{}</span>
<span class="c">/* What the heck is this?! */</span>
</code></pre>
</div>

<p>If I worked on a team, and someone contributed something like this to the codebase, I’d be having serious, <em>serious</em> words.</p>

<p>The next dev that comes along and wants to override this cascading rule is going to have a tough time. With that in mind, I would advise against using nesting at all costs—unless you know what you’re doing.</p>

<p>Lucky for us, there’s a plugin for this! With Stylelint, we can install a plugin aptly named <code class="highlighter-rouge">stylelint-statement-max-nesting-depth</code>, and set a max nesting limit to help swat away any nesting abuse.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>npm install stylelint-statement-max-nesting-depth --save-dev
</code></pre>
</div>

<p>And by simply adding the following to the scss-lint task in our gulpfile, it’s wired up:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">"scss-lint"</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">stylelintConfig</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">"plugins"</span><span class="p">:</span> <span class="p">[</span>
      <span class="s2">"stylelint-statement-max-nesting-depth"</span>
    <span class="p">],</span>
    <span class="s2">"rules"</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">//[...]</span>
      <span class="s2">"statement-max-nesting-depth"</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="p">{</span> <span class="na">countAtRules</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}],</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">//[..]</span>
<span class="p">});</span>
</code></pre>
</div>

<p>For teams that know what they’re doing, i’d set the max limit to <strong>3</strong>. <em>(Set it lower for inexperienced teams)</em>.</p>

<p>With a max nesting limit set to 3, Stylelint would prompt the project manager to refactor the above code. The project manager goes away, has a little think, and comes back with this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.component</span><span class="nd">:hover</span> <span class="err">{</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">5px</span> <span class="m">0px</span> <span class="nf">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="mi">.75</span><span class="p">)</span><span class="err">;</span>

  <span class="nc">.component__child</span> <span class="err">{</span>
    <span class="nt">ul</span> <span class="err">{</span>
      <span class="nt">li</span> <span class="err">{</span>
        <span class="nt">a</span><span class="nd">:hover</span> <span class="err">{</span>
          <span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">underline</span><span class="err">;</span>
        <span class="err">}</span>
      <span class="err">}</span>
    <span class="err">}</span>
  <span class="err">}</span>  
<span class="err">}</span>
</code></pre>
</div>

<p>This refactored version is a little more readable, but still unacceptable. There is still absolutely no need for any of this selector nesting! The linter knows this and forces the project manager to rethink their implementation in order to fix the build.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.component</span><span class="nd">:hover</span> <span class="err">{</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">5px</span> <span class="m">0px</span> <span class="nf">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="mi">.75</span><span class="p">)</span><span class="err">;</span>
<span class="err">}</span>

<span class="nc">.component__child</span> <span class="err">{</span>
  <span class="nt">a</span><span class="nd">:hover</span> <span class="err">{</span>
    <span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">underline</span><span class="err">;</span>
  <span class="err">}</span>
<span class="err">}</span>  
</code></pre>
</div>

<p>Now they’re getting somewhere! This would now be accepted by the linter, and the build would pass. The code above isn’t bad, but it could always be better! If you wanted to be <em>really</em> strict, you could turn all nesting—excluding <code class="highlighter-rouge">@ rules</code>—off completely. This would really force members of the codebase—including the project manager—to think very carefully about what they’re writing.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.component</span><span class="nd">:hover</span> <span class="err">{</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">5px</span> <span class="m">0px</span> <span class="nf">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="mi">.75</span><span class="p">)</span><span class="err">;</span>
<span class="err">}</span>

<span class="nc">.component__link</span><span class="nd">:hover</span> <span class="err">{</span>
  <span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">underline</span><span class="err">;</span>
<span class="err">}</span>
</code></pre>
</div>

<p>Lovely! Without the build pipeline linting our stylesheets, and prompting for a refactor, this type of lazy coding would never have been caught, and the codebase would gradually degrade in quality.</p>

<p>Hopefully by now I’ve convinced you that linting your stylesheets is a worthwhile investment. Linting is your friend. The investment is cheap, and it protects teams from the technical debt of a poorly written codebase.</p>

<p>Now go, my developer and designer friends!</p>

<p>Henceforth and lint!</p>
</description>
    </item>
    
    
    
    <item>
      <title>Year Review 2015</title>
      <link>http://www.creativenightly.com/2015/12/Year-Review-2015/</link>
      <pubDate>Wed, 30 Dec 2015 20:43:12 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2015/12/Year-Review-2015</guid>
      <description><p>Wow, it’s been a while since I’ve written anything on here. I’ve been so caught up with commissioned work, that I really let a lot of things slip in the second half of this year. Last year, I set myself a fair number of <a href="/2014/12/Farewell-2014-hello-2015/">goals to complete this year</a>, and the big question is — did I achieve them?</p>

<!--more-->

<p>The short answer is, no, not really. Nearly all of my time this year ended up being spent on commissioned work. However, I did still achieved <em>stuff</em> this year.</p>

<p>Let’s review the targets I set myself for this year first, and then look at what else I achieved this year.</p>

<h2 id="the-goals-i-set-myself-for-2015">The goals I set myself for 2015</h2>

<p><strong>Learn more about continuous delivery</strong> — I really wanted to learn more about <a href="https://www.thoughtworks.com/continuous-delivery">continuous delivery</a> and understand how I could incorporate more of this into my workflows. I think I’m closer to where I want to be after this year; I’ve had a tendency to work on projects in secrecy; not releasing them to the world until I felt I’d perfected them, and this is <em>totally</em> the wrong way to develop things. It doesn’t matter how perfect I think something is, if my user base can’t use it. Get the product out early, and iterate on it <em>frequently</em> based on user feedback. There’s still a long way to go, but I’m really enjoying the benefits that continuous delivery brings.</p>

<p><strong>Use Rails and Meteor a lot more for back end projects</strong> — I didn’t get to use Rails and Meteor in projects, but I did use Node a lot more in projects. Meteor still feels like a closed ecosystem; it’s essentially a lot of magic that sits on top of Node. Meteor does still appeal to me, but I think I’ll only use it for projects that require quite a lot of database magic. Perhaps 2016 is the year? Perhaps not.</p>

<p><strong>Develop the Wildflame brand further</strong> — As far as developing the Wildflame brand, I had to put some of the bigger tasks on the back-burner this year. I got some really nice business cards created for <a href="https://medium.com/@kingscooty/web-summit-2015-a-developer-s-perspective-c490c0048ad4">my trip to Web Summit 2015</a>, but everything else got put on hold.</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/393c3A2P023n0M3v1P0e/business-cards.jpg?v=0cbaed64" alt="Business cards" /></p>

<p>I’m really hoping I can completely revamp the website, and reposition the brand a bit in 2016.</p>

<p><strong>Incorporate electronics into more projects</strong> — This goal went horribly wrong. I barely touched any hardware this year, which is rather upsetting. Again this comes down to not having any down time from paid work. I really want to make time for this in 2016. There’s a backlog of things I’d like to make, including an LED ticker, and a Nuka Cola Quantum light from the Fallout game series, and a number of Internet of Things devices.</p>

<p><strong>Blog more</strong> — Ha! Again, this one went horribly wrong. I haven’t blogged an article since April, and the articles I did write, are rather uninspiring. I need to make amends this year; I’d like to make this site more of a resource in 2016, and blog more frequently, with more inspiring content. Watch this space!</p>

<p><strong>Exercise more by incorporating more into my daily commute</strong> — I’m still power walking the 3–4 tram stops across town when I head into the office, and taking the stairs instead of the elevator. My biggest blocker, is when I work from home…</p>

<p><strong>Improve one thing by 1% each and every day</strong> — This is pretty hard to do <em>each and every day</em>, but this has now become part of my philosophy, and I can only get better at it.</p>

<p><strong>Reduce the amount of distraction</strong> — Out of all the goals I set myself, I think I accomplished this one the best. Distraction comes in many different forms, and my biggest distraction is clutter — cluttered mind, and cluttered surroundings. I never took notes, which meant my brain was always trying to remember things, I also constantly allowed my desk space (both physical and virtual) to get cluttered. I now use <a href="https://culturedcode.com/things/">Things</a> and <a href="https://www.evernote.com/referral/Registration.action?sig=8053eeceed7c9c8951f1c6da01fddd71&amp;uid=50553">Evernote</a> religiously, and use <a href="https://www.noodlesoft.com/hazel.php">Hazel</a> to automate <em>all</em> of the cleanup tasks on my computer. Sadly I can’t use Hazel to clean my physical space, but I’ve got better at this too, and it’s really helped keep me focused on the important tasks. I’m even using <a href="http://receipt-bank.com/">Receipt Bank</a> to handle my expenses. I’m definitely going to try and automate even more things in 2016.</p>

<h2 id="looking-forward-to-2016">Looking forward to 2016</h2>

<p>So I guess it’s that time again. Time to set myself more tasks / goals for the year ahead.</p>

<ol>
  <li><strong>Go paperless</strong> — I started my path towards this maybe about a month ago. I want to get to 95% paperless by the end of 2016. That means, receipts, invoices, letters, statements all electronically stored in a well organised digital catalogue.</li>
  <li><strong>Start investing in the stock market</strong> — I’ve toyed with this notion for a while now, but never had the courage to actually do it. Interest rates are at an all time low, which is great for borrowers, but not so great for savers. I’d really like to learn more about investing in stocks, and pick 1–2 funds / trusts to invest some of my savings in.</li>
  <li><strong>Electronics</strong> — I need to make up for the lack of this in 2015. I’ve got a few things on the backlog that I’d like to implement: LED ticker with data feed; Nuka Cola Quantum light; Arcade Machine; and programmable Christmas tree lights. I’m hoping I can make at <em>least</em> 2 of these by the end of 2016.</li>
  <li><strong>New websites for wildflame.co.uk and kingscooty.com</strong> — I never found the time to properly invest in revamping these two sites in 2015. Kingscooty.com will be 5 years old this year, and wildflame.co.uk is getting on for 2 years old. I’ve gotta say, I’m still impressed with how well both of these sites stand up against the test of time! But I’d really like to flex my muscle and mind this year and create something truly modern for both of these domains.</li>
  <li><strong>Visit Germany and sample all their glorious wheat beers</strong> — I’m a huge, <em>huge</em> fan of German wheat beers — or weisse beers. Germany is a beautiful country, and I’m really keen to get a visit in this coming year. I’d love to visit all the breweries too - Erdinger, Schneider Weisse, Hacker-Pschorr, Maisel Weisse. Mmmm.</li>
</ol>

<p>I think that’s it. I’ll maybe revisit this and add more if anything stands out. Here’s hoping for a fruitful and productive 2016!</p>

<p>Happy New Year!</p>
</description>
    </item>
    
    
    
    <item>
      <title>What I learned in April 2015</title>
      <link>http://www.creativenightly.com/2015/04/What-i-learned-in-April-2015/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0100</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2015/04/What-i-learned-in-April-2015</guid>
      <description><h3 id="the-good">The good</h3>
<ul>
  <li><strong>Productivity on steroids</strong>
    <ul>
      <li>This month’s been a really productive one. I’m really happy with the number of topics I’ve managed to cover and learn. I’ve listed them below.</li>
    </ul>
  </li>
  <li><strong>Docker</strong>
    <ul>
      <li>Finally got round to learning Docker, and, wow, it’s amazing. I’ve always had a gripe with having to use vagrant, as you need a new image for each project you work on, and that very quickly adds up. With Docker, you can spin up an instance of a base image, and add layers on top of it, meaning that resources can be shared across containers. Awesome!</li>
    </ul>
  </li>
  <li><strong>Topics I learned about this month:</strong>
    <ul>
      <li><a href="https://www.docker.com/">Docker</a> - Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications.</li>
      <li><a href="http://redis.io/">Redis</a> - High performance data persistence.</li>
      <li><a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a></li>
      <li><a href="http://sinonjs.org/">SinonJS</a> - Standalone test spies, stubs and mocks for JavaScript.</li>
      <li><a href="https://github.com/jhnns/rewire">RewireJS</a> - Easy dependency injection for node.js unit testing.</li>
      <li><a href="https://github.com/petkaantonov/bluebird">Promises</a> - Bluebird is a full featured promise library with unmatched performance.</li>
      <li>Continuous delivery (CI, Docker, automation via web hooks)</li>
    </ul>
  </li>
</ul>

<h3 id="the-bad">The bad</h3>
<ul>
  <li><strong>Slowed down on exercise</strong></li>
  <li><strong>Unnecessary stress</strong>
    <ul>
      <li>Still attempting to improve by much more than 1% on the previous day. Leading to unnecessary stress.</li>
    </ul>
  </li>
  <li><strong>Email</strong>
    <ul>
      <li>Email has a tendency to get on top of me. That clean inbox that Dropbox Mailbox tries to force on you can get near to 100 sometimes. (It’s on 140 at the moment.)</li>
    </ul>
  </li>
  <li><strong>Not finding time to blog</strong>
    <ul>
      <li>There’s 4 or 5 articles I want to write, and that number isn’t going down.</li>
    </ul>
  </li>
</ul>
</description>
    </item>
    
    
    
    <item>
      <title>Using Bower install hooks to automate changing CSS files into SASS files after installing them</title>
      <link>http://www.creativenightly.com/2015/03/Using-bower-install-hooks-to-prep-CSS-components-for-SASS-workflows/</link>
      <pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2015/03/Using-bower-install-hooks-to-prep-CSS-components-for-SASS-workflows</guid>
      <description><p>Have you ever tried to import a <em>CSS</em> bower component into your SASS/SCSS workflow, with the intention of physically importing the contents of that file in to your main.scss file; only to find that the file is linked/referenced and ignored during the build process?</p>

<!--more-->

<p><strong>Yes, <em>me too</em>.</strong></p>

<p>The CSS file in question was Nicolas Gallagher’s <a href="http://necolas.github.io/normalize.css/">normalize.css</a>. I know there are plenty of SCSS versions out there, but they normally try to do too much — like set baselines etc. I’d much rather just physically import the plain old CSS version into my main.scss file!</p>

<p>Of course we can just <em>rename</em> the offending CSS file so that it now imitates an SCSS file, but we don’t want to have to do that each and every time someone clones the project, or integration builds the project, now do we?</p>

<p><strong>So <em>what</em> can we do to automate this?</strong></p>

<h2 id="say-hello-to-bower-install-hooks">Say hello to Bower install hooks!</h2>

<p>Having a little read of the Bower documentation, I came across their <a href="https://github.com/bower/bower/blob/master/HOOKS.md">hook docs</a>. They’re nifty little hooks that can run <em>before</em> or <em>after</em> an install, and <em>before</em> an uninstall. <strong><em>Awesome!</em></strong></p>

<p>What we can do with these hooks is <em>rename</em> the CSS file to an SCSS file after the component has installed, and boom! It’s ready to work in our build pipeline!</p>

<h3 id="example">Example:</h3>
<p>Checkout the following example. What we’re doing here, is setting up a reference to a <em>postinstall</em> script in the <em>.bowerrc</em> file. In the <em>.bower-postinstall</em> file, we tell bower to rename normalize.css to normalize.scss. And this script will run after each install/upgrade!</p>

<noscript><pre>400: Invalid request
</pre></noscript>
<script src="https://gist.github.com/0022988332d617cf6098.js"> </script>

<p>This is really neat, because it means you can upgrade your components, and you can use them on an integration server without having to rename them each time, or include them in your repository!</p>

<p>All that’s left to do now, is import the component into your main.scss file, and you’re away!</p>

<p><strong>Update 1:</strong> If you’re having any issues, make sure to run the following command in the terminal to ensure the file has the right permissions to run.</p>

<p><code class="highlighter-rouge">
 chmod +x .bower-postinstall.sh
</code></p>
</description>
    </item>
    
    
    
    <item>
      <title>What I learned in February 2015</title>
      <link>http://www.creativenightly.com/2015/02/What-i-learned-in-February-2015/</link>
      <pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2015/02/What-i-learned-in-February-2015</guid>
      <description><h3 id="the-good">The good</h3>
<ul>
  <li><strong>Free time</strong>
    <ul>
      <li>After finishing up my work on the BBC Taster project, I booked some time off to have some down time, and work on my own projects, and a few R&amp;D things for my company <a href="http://wildflame.co.uk">Wildflame Studios</a>.</li>
    </ul>
  </li>
  <li><strong>Raspberry Pi 2 is released</strong>
    <ul>
      <li>I bought 3. And they’re awesome. I put a touch screen on one; made another a retro games machine; and the last, a <a href="https://hubot.github.com/">company bot (named Wildbot)</a> for <a href="http://slack.com">Slack</a>. <em>(I’ll try and do a write up on this at some point)</em>.</li>
    </ul>
  </li>
  <li><strong>Topics I learned about this month</strong>
    <ul>
      <li><a href="/2015/02/Optimising-Typekit-for-mobile-devices/">Async Typekit optimisation</a></li>
      <li><a href="https://github.com/addyosmani/critical">Inlining critical CSS</a></li>
    </ul>
  </li>
</ul>

<h3 id="the-bad">The bad</h3>
<ul>
  <li><strong>Lazy</strong>
    <ul>
      <li>The lack of a commute means I’ve gotten a bit lazy again, which is a shame. I was a big fan of the morning and evening power walk across town, followed by 10 flights of stairs.</li>
    </ul>
  </li>
</ul>
</description>
    </item>
    
    
    
    <item>
      <title>Optimise Typekit for mobile and improve your Page Insights Score</title>
      <link>http://www.creativenightly.com/2015/02/Optimising-Typekit-for-mobile-devices/</link>
      <pubDate>Sat, 14 Feb 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2015/02/Optimising-Typekit-for-mobile-devices</guid>
      <description><p><a href="https://developers.google.com/speed/pagespeed/insights/">Google Page Insights</a> is a really neat tool from Google that grabs a page of your site and reports back statistics on load performance and user experience. However, if you’re using Typekit, Google Page Insights can be pretty mean – this is due to Typekit typically loading in as a render blocking script in the head.</p>

<p>So how can we speed up Typekit for mobile users, while preserving the rich flashless experience on desktop?</p>

<h3 id="asynchronous-font-loading">Asynchronous font loading</h3>

<p>Font libraries like Typekit offer a method to load in their fonts asynchronously, thus allowing the rest of the page to render while the fonts download. <strong>However, the downside to this is that annoying flash of unstyled text.</strong> In some cases a well formed font stack can prevent this flash of text from being drastic – or even noticeable – but what if that’s not an option?</p>

<h3 id="stop-render-blocking-just-for-mobile">1. Stop render blocking <em>just for mobile</em></h3>

<p><strong>The aim of the game for mobile is speed.</strong> I don’t care what anyone else has to say on the matter. If you’re a designer designing for mobile and thinking about anything else other than speed/performance, you’re wrong! It’s perfectly acceptable for the flash of unstyled fonts on mobile – chances are mobile visitors are here purely for the content, not the bells and whistles.</p>

<p>The trick here is to wrap the Typekit load script in a little if statement that detects what conditions to swap render blocking to async mode, before writing the required load script elements to the DOM.</p>

<p>In the example below, I’ve got for a simple browser width detction. Any browser <em>below</em> 800px wide on page load will get the async non-render blocking treatment.</p>

<noscript><pre>400: Invalid request
</pre></noscript>
<script src="https://gist.github.com/a419eb8a4f820b5f60f2.js"> </script>

<h3 id="vend-a-seperate-kit-with-opentype-features-disabled">2. Vend a seperate kit with OpenType features disabled</h3>

<p>TypeKit now comes with OpenType features enabled for the majority of its fonts.</p>

<blockquote>
  <p>OpenType layout features are typographic extras built into fonts, involving substituting different glyphs or repositioning glyphs to achieve better typography. OpenType features include things such as kerning, ligatures, small caps, oldstyle figures, and many more things. Support for such goodies is part of CSS3.</p>
</blockquote>

<p>This is all great news, <strong>but these features come at a cost</strong>, typically 20 kb+ <em>per font</em>. An overhead you can probably do without for smaller screens.</p>

<p>The trick here is create <strong>2 different kits for mobile and desktop</strong>. If we use the snippet above, all we need to do it add the kit code inside the if statements so that any mobile visitors will get the smaller Typekit file, and desktop users will get the larger file with all the extra features.</p>

<noscript><pre>400: Invalid request
</pre></noscript>
<script src="https://gist.github.com/f8eb664f2ad02cab003d.js"> </script>

<h3 id="remove-typekit-from-mobile-all-together">3. Remove Typekit from mobile all together</h3>

<p>Bit drastic, but if you’re happy with your font stack, why not remove Typekit from mobile devices all together?  After all, the fastest HTTP request is the one not made at all.</p>

<p>Here’s the above snippet adjusted for this scenario.</p>

<noscript><pre>400: Invalid request
</pre></noscript>
<script src="https://gist.github.com/2bf2ddbd3054c76b5c7a.js"> </script>

<h3 id="bask-in-the-glory-of-your-improved-score">4. Bask in the glory of your improved score</h3>

<p>Now all that’s left to do is bask in the glory of your improved Page Insights score! Creative Nightly scores a whopping 95/100 for mobile and 84/100 for desktop. <strong><em>That’s the difference async typekit makes!</em></strong></p>
</description>
    </item>
    
    
    
    <item>
      <title>Using Grunt and Gulp together on the same project</title>
      <link>http://www.creativenightly.com/2015/02/Using-Grunt-and-Gulp-side-by-side/</link>
      <pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2015/02/Using-Grunt-and-Gulp-side-by-side</guid>
      <description><p><em><strong>Disclaimer</strong>: There are purists out there that will argue that <a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/">npm is perfectly capable doing what Grunt and Gulp do</a> (which I do agree with – to a point). Grunt and Gulp (and their plugins wrappers) are <s>fairly</s> very bloaty, but there’s no denying what Grunt and Gulp provide in terms of ease of use and configuration.</em></p>

<p>I’m a big fan of Gulp. It’s much faster than Grunt (thanks to the use of streams to manipulate the data before outputting it to a file). Grunt, on the other hand, relies on a .tmp folder as a dumping place for files as they get transformed from plugin to plugin.</p>

<p><strong>However, due to this fact that Gulp is faster, I’ve fallen into the rather bad habbit of trying to do <em>everything</em> in Gulp, even if plugins have no support for it.</strong></p>

<h2 id="why-not-use-both-together">Why not use both together?</h2>

<p><a href="http://assemble.io">Assemble</a> is a pretty rad static site generator – it follows similar principles to Ruby’s Jekyll. The only problem is, the <em>stable</em> build only supports Grunt, <em>not Gulp</em>. The devs have an alpha build (<a href="https://github.com/assemble/assemble/tree/v0.5.0">v0.5</a>, and <a href="https://github.com/assemble/assemble/tree/v0.6.0">v0.6</a>) that support Gulp, but it’s unstable and still has <em>a lot</em> of features that aren’t wired up.</p>

<p>So after about 2 months of struggling to get Assemble configured to behave <em>properly</em> with Gulp on various projects, I decided to just go back to using it with Grunt, and already, it’s made <strong>such a difference</strong>!</p>

<h3 id="using-assemble-with-gulp-the-proper-way">Using Assemble with Gulp (<em>the proper way</em>)</h3>

<p>As you’ve probably guessed by this point, all of my tasks and watch tasks are wired up using Gulp. This poses a tricky situation when it comes to getting my Assemble Grunt task wired up nicely with the rest of my Gulp watch tasks; and since configuring Assemble directly in Gulp is not an option, we need a new solution.</p>

<h4 id="introducing-gulp-grunt">Introducing gulp-grunt</h4>

<p>Not wanting to spend too much time getting everything wired up, I started searching for something that would help me link the two build tools together. Introducing <a href="https://github.com/gratimax/gulp-grunt">gulp-grunt</a> a tool that will allow for running grunt tasks from gulp.</p>

<h4 id="so-far-so-good">So far so good!</h4>

<p>I’ve only been testing this workflow out for a few hours, but it’s definitely an improvement – especially when working with Assemble or any other plugin that doesn’t support Gulp (<em>e.g. rsync</em>).</p>

<p><strong>Here’s an example of getting a Grunt Assemble task wired into Gulp</strong>: this task watches the assemble files for changes in Gulp, compiles the changes using the assemble task in Grunt, and updates the browser on any change with browsersync. Neat!
(<em>You’ll notice that I’ve namespaced my Grunt tasks to avoid them clashing with anything in Gulp, so my Assemble task is <strong>grunt-assemble</strong></em>):</p>

<noscript><pre>400: Invalid request
</pre></noscript>
<script src="https://gist.github.com/ffa08f15ab087d84d79d.js"> </script>

</description>
    </item>
    
    
    
    <item>
      <title>What I learned in January 2015</title>
      <link>http://www.creativenightly.com/2015/01/What-i-learned-in-January-2015/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2015/01/What-i-learned-in-January-2015</guid>
      <description><p>As part of my <a href="/2014/12/Farewell-2014-hello-2015/">New Year plans for self improvement</a>, I’m going to take up a monthly retrospective. It’s something I got used to doing while working with the BBC Taster team, and I quite like it. Essentially it’s a look back on a given time period; you jot down what went well, what went bad, and what made you angry. The good is celebrated, while the rest is actioned for improvement during the next time block. At the BBC, we had retrospectives every 2 weeks, but since it’s just me, a month will do fine.</p>

<!--more-->

<p>I’ll probably tinker with the format of this as the year goes on, but for now, here goes…</p>

<h3 id="the-good">The good</h3>

<ul>
  <li><strong>Launched BBC Taster!</strong>
    <ul>
      <li>Massive news. Last week’s launch was the culmination of 10 months of hard work. I’m very proud of what myself and the rest of the team managed to achieve. The journey has just begun for the rest of the team, and I wish them luck!</li>
    </ul>
  </li>
  <li><strong>Writing is good for you!</strong>
    <ul>
      <li>I’m really enjoying it. Especially when I spend a few days isolated in an empty office with no social interaction. It definitely helps to keep that part of your brain working!</li>
    </ul>
  </li>
  <li><strong>I’ve been 1000% more productive this month.</strong>
    <ul>
      <li>Really. This may be due to all the little things like <a href="">clearing out the apps on my iPhone</a>, and automating tasks with Hazel (which I must write about at some point!), but I’m definitely staying much more focused for longer periods of time!</li>
    </ul>
  </li>
  <li><strong>Incorporated more exercise into my daily commute</strong>
    <ul>
      <li>I’ve been taking the scenic route to work – walking from the Northern Quarter through the city centre, past Albert Square, through the AMC Complex, and to Deansgate tram stop. Once I get to the office, I skip the lift and take 10 flights of stairs. It’s done wonders, and properly gets me awake for the day. It’s going to be a struggle maintaining this when I’m based in my Northern Quarter office next month.</li>
    </ul>
  </li>
  <li><strong>Things I covered/learned about this month:</strong>
    <ul>
      <li><a href="https://github.com/assetgraph/assetgraph">Assetgraph</a></li>
      <li><a href="http://www.thedotpost.com/2014/11/nicolas-gallagher-thinking-beyond-scalable-css">Thinking beyond scalable CSS</a></li>
      <li><a href="https://github.com/addyosmani/critical">Inlining critical CSS</a></li>
      <li><a href="http://susy.oddbird.net/">Susy SASS</a></li>
      <li><a href="http://alistapart.com/article/responsive-images-in-practice">Responsive Images</a></li>
    </ul>
  </li>
</ul>

<h3 id="the-bad">The bad</h3>

<ul>
  <li><strong>I now have the urge to write about <em>everything</em></strong>.
    <ul>
      <li>I probably need to reign this in a bit, ha.</li>
    </ul>
  </li>
  <li><strong>The improved productivity has led to me working from dawn till dusk.</strong>
    <ul>
      <li>Again, I need to reign this in. I’ve definitely gone to bed a few times this month with an overactive brain. Not really too sure how to action this – perhaps things will settle down once I’ve gotten up to speed with the huge backlog of stuff I wanted to work on after finishing with BBC Taster. <strong><em>Revisit next month</em></strong>.</li>
    </ul>
  </li>
  <li><strong>There’s just <em>too</em> much to learn</strong>
    <ul>
      <li>The industry moves at such a fast pace, it’s almost impossible to stay on top of everything – even when working from dusk till dawn. I need to stop letting this get to me and focus on improving <em>just one thing</em> by 1% a day.</li>
    </ul>
  </li>
</ul>

<h3 id="the-angry">The angry</h3>

<ul>
  <li><strong>I hate advertising and click bait</strong>
    <ul>
      <li>Goes without saying, really. It’s particularly bothered me this month, especially since <a href="http://www.extremetech.com/computing/182428-ironic-iframes-adblock-plus-is-probably-the-reason-firefox-and-chrome-are-such-memory-hogs">AdBlock is probably the reason why Firefox and Chrome are such memory hogs</a> these days. <em>Rawr!</em></li>
    </ul>
  </li>
  <li><strong>It’s too damn cold!</strong>
    <ul>
      <li>I’m so over Winter already, and in desperate need for some warmth and sunlight.</li>
    </ul>
  </li>
</ul>
</description>
    </item>
    
    
    
    <item>
      <title>Announcing BBC Taster</title>
      <link>http://www.creativenightly.com/2015/01/Announcing-BBC-Taster/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2015/01/Announcing-BBC-Taster</guid>
      <description><p>As a digital supplier for the BBC, I’ve been fortunate enough to work on a few BBC projects over the last 2 years.</p>

<!--more-->

<ul>
  <li>I helped BBC Homepage in 2013 with early UX prototypes of what is now becoming their vision for a new personalised Homepage.</li>
  <li>I helped BBC Sport shape Live into the <a href="http://www.bbc.co.uk/sport/live/football/30517006">product it is today</a>.</li>
  <li>I’ve also helped BBC R&amp;D with creating early prototypes of a vision for an interactive children’s app based on Sarah &amp; Duck, which is now a <a href="https://itunes.apple.com/gb/app/sarah-duck-day-at-the-park/id942926747">fully fledged app in the app store</a>.</li>
</ul>

<p><em>However</em>, the latest project that I’ve been working on is turning into something really special.</p>

<h2 id="say-hello-to-bbc-taster">Say hello to BBC Taster</h2>

<p>For the last 10 months, I’ve been working with BBC Connected Studio developing a new online product called <a href="http://bbc.co.uk/taster">BBC Taster</a>.</p>

<blockquote class="twitter-tweet" lang="en"><p>We are beyond excited to share something with you. <a href="https://twitter.com/BBCTaster">@BBCTaster</a> is a home for new ideas from the BBC&#10;<a href="https://t.co/dZOaal4E6H">https://t.co/dZOaal4E6H</a></p>&mdash; BBC Taster (@BBCTaster) <a href="https://twitter.com/BBCTaster/status/559644934056079360">January 26, 2015</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>The product started off as a vision from BBC Connected Studio to show off experiments that are developed across the BBC to the general public. Initially, I worked with a bare bones team at BBC Connected Studio to create and develop rapid prototypes for stakeholders in order to get backing and acquire funding for a fully fledged product. After achieving funding, development transitioned from prototyping to production grade continuous delivery and the team bolstered. All in all, the turnaround from concept to fully funded live product was just 10 months.</p>

<p>The BBC announced the new product at their Future is Now event <s>yesterday</s> Monday 26<sup>th</sup> Jan 2015, and the press and reception from the general public has been very positive. Here’s a few links to some of the articles:</p>

<ul>
  <li><strong>Engadget</strong> - <a href="http://www.engadget.com/2015/01/26/bbc-taster/">http://www.engadget.com/2015/01/26/bbc-taster/</a></li>
  <li><strong>Guardian</strong> - <a href="http://www.theguardian.com/media/2015/jan/26/bbc-taster-launch-users-shape-content">http://www.theguardian.com/media/2015/jan/26/bbc-taster-launch-users-shape-content</a></li>
  <li><strong>Wired</strong> - <a href="http://www.wired.co.uk/news/archive/2015-01/26/bbc-taster">http://www.wired.co.uk/news/archive/2015-01/26/bbc-taster</a></li>
  <li><strong>The Next Web</strong> - <a href="http://thenextweb.com/media/2015/01/26/bbc-launches-taster-showcase-new-digital-ideas-get-feedback/">http://thenextweb.com/media/2015/01/26/bbc-launches-taster-showcase-new-digital-ideas-get-feedback/</a></li>
</ul>
</description>
    </item>
    
    
    
    <item>
      <title>Why I've started setting rules for organising my iPhone apps</title>
      <link>http://www.creativenightly.com/2015/01/A-few-simple-rules-to-keep-your-smartphone-apps-organised/</link>
      <pubDate>Sat, 24 Jan 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2015/01/A-few-simple-rules-to-keep-your-smartphone-apps-organised</guid>
      <description><p>At the beginning of 2015, <a href="/2014/12/Farewell-2014-hello-2015/">I promised myself I’d get more organised</a>. I coined 2015 as the year of automation and productivity, so each day this year, I’ve been trying to improve on the previous day by just 1%.</p>

<h3 id="the-best-apps-do-one-thing-and-one-thing-well">The best apps do one thing, and one thing well</h3>
<p>The big problem with most apps is that they try to do <em>too much</em>. The best apps do <em>one thing</em>, and one thing <em>well</em>. Until recently, my iPhone suffered from serious app clutter; I had several apps installed, all competing to solve the same problem. The reason for this is partly fuelled by the fact Apple force a collection of apps on you that you can’t remove, and my reluctance to pick a standard for each of the major use categories. The outcome is I ended up using none of the apps the way they were intended and often struggling to find the apps I actually wanted to use.</p>

<p>At the beginning of the year, I decided to lock down an app for each of the major use categories (<em>mail, photos, tasks, notes etc</em>). And remove the rest / hide the redundant Apple apps. A big requirement for me was the ability to synchonise the data in the cloud for access on multiple devices. For anyone that’s interested, these are apps I’ve picked to do one thing, and one thing well:</p>

<ul>
  <li><strong>Mail</strong> - <a href="https://itunes.apple.com/gb/app/mailbox/id576502633">Mailbox</a></li>
  <li><strong>Tasks</strong> - <a href="https://itunes.apple.com/gb/app/things/id284971781">Things</a></li>
  <li><strong>Photos</strong> - <a href="https://itunes.apple.com/gb/app/carousel-by-dropbox/id825931374">Carousel</a></li>
  <li><strong>Notes</strong> - <a href="https://itunes.apple.com/gb/app/evernote/id281796108">Evernote</a></li>
  <li><strong>Cloud</strong> - <a href="https://itunes.apple.com/gb/app/dropbox/id327630330">Dropbox</a></li>
  <li><strong>Weather</strong> - <a href="https://itunes.apple.com/gb/app/dark-sky-weather-radar-hyperlocal/id517329357">Dark Sky</a></li>
  <li><strong>Music</strong> - <a href="https://itunes.apple.com/gb/app/spotify-music/id324684580">Spotify</a></li>
  <li><strong>Read Later</strong> - <a href="https://itunes.apple.com/gb/app/pocket-save-articles-videos/id309601447">Pocket</a></li>
  <li><strong>RSS Reader</strong> - <a href="https://itunes.apple.com/gb/app/flipboard-your-social-news/id358801284">Flipboard</a></li>
  <li><strong>2 Factor Auth</strong> - <a href="https://itunes.apple.com/gb/app/authy/id494168017">Authy</a></li>
  <li><strong>Password Management</strong> - <a href="https://itunes.apple.com/gb/app/1password-password-manager/id568903335">1Password</a></li>
</ul>

<h3 id="app-page-organisation-rules">App page organisation rules</h3>
<p>So I’ve figured out what apps I want to use, but now I need to define some rules for actually organising them on my phone. Here are some of the rules I’ve formulated to help keep me productive when using my iPhone.</p>

<ol>
  <li>Allow no more than 12 apps per page. That’s 3 full rows. (I’m using an iPhone 5) Any more than that clutters the page.</li>
  <li>Allow no more than 4 pages of apps.</li>
  <li>Keep folders to a minimum on the first 2 pages. Folders aren’t very visually appealling, and increase the amount of presses to get to important items. iPhones are beautiful, and so should navigating them.</li>
  <li>Reduce app overlap - don’t…
    <ul>
      <li><strong>Hide all Apple apps you’re not using</strong> in an ‘Apple’ folder.</li>
    </ul>
  </li>
  <li>Don’t install apps for the sake of it</li>
  <li>Clear out and delete all old apps that haven’t been used in the last 2 months.</li>
  <li>Put all apps you don’t use on a regular basis in folders.</li>
  <li>Use search to get to all apps not on pages 1 or 2.</li>
</ol>

<h5 id="what-apps-do-you-use-more-than-1-3-times-a-day">What apps do you use more than 1-3 times a day?</h5>
<p>These apps should probably go in your dock. I had a few contenders. Mailbox, Safari and Things are all apps I use fairly regularly throughout the day, and oddly, the Phone app wasn’t one of them. However, I only tend to use them <em>during</em> the day, and not really in the evenings. Where as messaging apps, social apps, and music were apps I’d dip into irrespective of time. The key part of the dock mechanism is that apps are made accessible from any page you’re on.</p>

<h5 id="what-apps-do-you-use-at-least-once-a-day">What apps do you use at least once a day?</h5>

<p>These apps go on the <em>frontpage</em>. Don’t allow for any more than <strong>3 rows</strong> of apps. Less is more, plus I refuse to believe you use more than 12 apps at least once a day.</p>

<h5 id="what-apps-do-you-use-less-than-once-a-day-but-more-than-once-a-week">What apps do you use less than once a day, but more than once a week?</h5>

<p>These apps go on page 2.</p>

<h5 id="and-the-rest-folders-search-is-your-friend">And the rest? Folders. Search is your friend!</h5>

<p>A page full of folders isn’t pretty. It’s a nightmare to navigate, and not visually appealing. I have friends who’s frontpages are like this! Pages like this should be reserved <em>only</em> for apps you use once in a blue moon. I think I’m going to try and clear up many of the apps on this page that I haven’t used in over 2 months.</p>

<h5 id="what-about-games">What about games?</h5>

<p>They go on the last page, page 4. Keep the distractions hidden away on the final page. I don’t care if they’re the best games on the planet, they should be hidden away. It’s all about reducing distraction and improving productivity. They’ll still be there on page 4 when you <em>want</em> them.</p>
</description>
    </item>
    
    
    
    <item>
      <title>Farewell, 2014, hello 2015!</title>
      <link>http://www.creativenightly.com/2014/12/Farewell-2014-hello-2015/</link>
      <pubDate>Tue, 30 Dec 2014 18:31:45 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2014/12/Farewell-2014-hello-2015</guid>
      <description><p>Well, it’s that time again; another year has come to a close. This year’s been pretty good to me. I’ve been to New York and Barcelona, dabbled with Rails backend development, taken a Raspberry Pi project from concept to centre stage of my living room, and helped develop a new product for the BBC called BBC Taster (<em>which <s>should go live early next year</s> went <a href="http://bbc.co.uk/taster">live on the 26th January 2015</a></em>).</p>

<p>All in all, <strong>2014’s been a good year</strong>.</p>

<p><em>But it could have been even better.</em></p>

<h2 id="distraction-is-all-around-us">Distraction is all around us</h2>

<p>Distraction is all around us. From cluttered desktops (<em>both physical and non physical</em>), smatphones overcrowded with useless apps, to the ever increasing click bait that surrounds us online. I wonder just how much more productive I would have been this year if I’d have put a foot down on the distraction that surrounds me[?].</p>

<h3 id="distraction-no-more">Distraction no more</h3>

<p>The one <strong>big</strong> thing I want to change going into 2015 is remove the amount of distraction that’s in my life. Right now, I only have a vague idea <em>how</em> I’m going to do it, but I know what areas I need to focus on:</p>

<ul>
  <li><strong>Clear out all the useless apps on my phone</strong>. No excuses. If it hasn’t been used in a month, <strong>delete it</strong>.</li>
  <li>Keep both my physical and non physical desktops completely clean at all times.</li>
  <li><strong>Stop using my laptop while watching TV</strong> - I end up not remembering what I’ve just watched, and not doing <em>anything</em> productive on my laptop.</li>
  <li><strong>Cut out how often I tend to email</strong>. It’s massively counterproductive.</li>
  <li><strong>Swap lifts for stairs</strong>. This month I started taking the 10 flights of stairs up to the office I’m currently working from. It’s paying benefits already. I need to continue this.</li>
  <li><strong>Stop putting things off</strong> - if it needs doing, do it <strong>immediately</strong>, or <strong>schedule it properly</strong>.</li>
  <li>Automate anything repetitive that can be done by a machine.</li>
</ul>

<h2 id="targets-for-2015">Targets for 2015</h2>

<ul>
  <li>I want to learn more about continuous delivery.</li>
  <li>Use Rails and Meteor a lot more for back end projects.</li>
  <li>Develop the Wildflame brand further.</li>
  <li>Incorporate electronics into more projects.</li>
  <li>Blog more. I’d like to write about <em>something</em> at least twice a month.</li>
  <li>Exercise more by incorporating more into my daily commute.</li>
  <li>Improve one thing by <a href="http://jamesclear.com/marginal-gains">1% each and every day</a>.</li>
  <li><strong>Reduce the amount of distraction</strong>.</li>
</ul>

<p>I want 2015 to be the <strong>year of less distraction, more automation and increased productivity</strong>. Let’s see where this takes me, and I’ll report back on any improvements I make.</p>
</description>
    </item>
    
    
    
    <item>
      <title>Setting up Hyperion on a Raspberry Pi for use with Lightpack</title>
      <link>http://www.creativenightly.com/2014/07/setting-up-hyperion-on-a-raspberry-pi-for-use-with-lightpack/</link>
      <pubDate>Tue, 22 Jul 2014 00:00:00 +0100</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2014/07/setting-up-hyperion-on-a-raspberry-pi-for-use-with-lightpack</guid>
      <description><h3 id="introduction">Introduction</h3>

<p>I’ve tried quite a few different controllers for controlling LEDs on a Raspberry Pi. Most require a lot of resources, and don’t scale well with an increase in LED numbers. I wanted a controller that could handle 300+ LEDs without breaking a sweat incase I ever decided to move away from Lightpack to a more custom solution. This is where Hyperion comes in.</p>

<p>Hyperion is an open source ‘AmbiLight’ implementation. It’s main selling points are:</p>

<ul>
  <li>Low CPU load. For a led string of 50 leds the CPU usage will typically be below 2% on a non-overclocked Pi.</li>
  <li>Json interface which allows easy integration into scripts.</li>
  <li>A command line utility allows easy testing and configuration of the color transforms.</li>
  <li>Priority channels are not coupled to a specific led data provider which means that a provider can post led data and leave without the need to maintain a connection to Hyperion.</li>
  <li>HyperCon. A tool which helps generate a Hyperion configuration file. The tool will also remember your settings from the previous run.</li>
  <li>Black border detector.</li>
  <li>A scriptable effect engine.</li>
  <li>Boblight server interface to enable the use of clients written for Boblight.</li>
  <li>Generic software architecture to support new devices and new algorithms easily.</li>
</ul>

<h3 id="installing-hyperion">Installing Hyperion</h3>

<p>Install the following prerequisites first using apt-get.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">apt-get update
apt-get install libqtcore4 libqtgui4 libqt4-network libusb-1.0-0 libprotobuf7 ca-certificates</code></pre></figure>

<p>Next grab the install Hyperion script from the Hyperion github repo.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">wget -N https://raw.github.com/tvdzwan/hyperion/master/bin/install_hyperion.sh</code></pre></figure>

<p>Installing Hyperion is as simple as running the following command.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">sh ./install_hyperion.sh</code></pre></figure>

<p>To get it working with Lightpack, you’ll want to edit the default hyperion config file located at <code class="highlighter-rouge">/etc/hyperion.config.json</code> and change the <strong>type</strong> to “Lightpack”.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">nano /etc/hyperion.config.json

 <span class="s2">"type"</span>       : <span class="s2">"lightpack"</span>,
 <span class="s2">"output"</span>     : “<span class="s2">",</span></code></pre></figure>

<p>Next restart the server with the following command. If all goes well, you should see your Lightpack light up with rainbow colours, before mimicking the colours of your screen.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">service hyperion restart</code></pre></figure>

<p><strong><em>Edit 8th January 2016</em></strong> — I’ve since moved away from using Lightpack. The cable mess it created along with the fact that despite being marketed as having 30 LEDs, you can only individually address 10 of them (rubbish!) resulted in me researching into alternate solutions.</p>

<p>I’m now running a fully custom setup using 300+ WS2801 LEDs — all individually addressable!</p>

<h4 id="my-setup">My Setup</h4>

<p>My hardware setup from a wiring perspective is fairly complex, but if anyone wants to me post a write up, tweet me at <a href="http://twitter.com/kingscooty">@KingScooty</a> and let me know!</p>

<p>Amongst other things, it allows me to switch sources by simply turning a new device on, and the lights will automatically switch over to the new source. Here’s a few live examples of my setup for anyone that’s interested:</p>

<iframe src="https://vine.co/v/izpiA1tebtm/embed/simple" width="600" height="600" frameborder="0"></iframe>
<script src="https://platform.vine.co/static/scripts/embed.js"></script>

<iframe src="https://vine.co/v/izvprFTBYHw/embed/simple" width="600" height="600" frameborder="0"></iframe>
<script src="https://platform.vine.co/static/scripts/embed.js"></script>

</description>
    </item>
    
    
    
    <item>
      <title>Setting up and securing an Ubuntu VPS on Digital Ocean</title>
      <link>http://www.creativenightly.com/2013/11/Setting-up-and-securing-a-VPS-on-Ubuntu-13-10-x64/</link>
      <pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2013/11/Setting-up-and-securing-a-VPS-on-Ubuntu-13-10-x64</guid>
      <description><p><strong><em>This is a work in progress post, as i’m short on time to dabble with security. I’ll add to it as i get time to set up my VPS</em></strong></p>

<h2 id="basic-security">Basic Security</h2>

<p>This part is extensive, and for good reason. Security is the most important part of configuring a web server. Below are several measures to make sure you’ve got a good foundation in place to safeguard your server.</p>

<h3 id="change-root-password">Change root password</h3>

<p>Currently your root password is the default one that was sent to you when you registered your VPS. The first thing to do is change it to one of your choice.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">passwd</code></pre></figure>

<h3 id="create-a-new-user">Create a new user</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">adduser &lt;your username&gt;
visudo</code></pre></figure>

<p>Add the following line and save:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;your username&gt; <span class="nv">ALL</span><span class="o">=(</span>ALL:ALL<span class="o">)</span> ALL</code></pre></figure>

<h3 id="configure-ssh">Configure SSH</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">nano /etc/ssh/sshd_config</code></pre></figure>

<p>Edit the following lines and save:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">Port &lt;your port number&gt;
Protocol 2
PermitRootLogin no
PermitEmptyPasswords no
UseDNS no
AllowUsers yourusername</code></pre></figure>

<p>You should choose a port number that is less than 1024, and not 22. Here’s why.</p>

<p>reload ssh</p>

<p>Exit and login as new user:</p>

<p>exit
ssh -p <your port="" number=""> <your username="">@<yourdomain.com></yourdomain.com></your></your></p>

<h3 id="update-ubuntu">Update Ubuntu:</h3>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">sudo apt-get update <span class="o">&amp;&amp;</span> sudo apt-get upgrade --show-upgraded</code></pre></figure>

<h3 id="enable-automatic-security-updates">Enable automatic security updates:</h3>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">sudo apt-get install unattended-upgrades
sudo nano /etc/apt/apt.conf.d/10periodic</code></pre></figure>

<h3 id="harden-security-of-git-user">Harden security of git user</h3>

<p>Switch to git-shell for git user.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">sudo chsh -s /usr/bin/git-shell git</code></pre></figure>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">sudo mkdir /home/git/git-shell-commands
sudo cp /usr/share/doc/git/contrib/git-shell-commands/list /home/git/git-shell-commands/
sudo cp /usr/share/doc/git/contrib/git-shell-commands/help /home/git/git-shell-commands/
sudo chown -R gituser /home/git/git-shell-commands
sudo chmod -R u+x /home/git/git-shell-commands</code></pre></figure>

<h3 id="install-nmap">Install nmap</h3>

<p>Nmap is a utility for network exploration or security auditing. It supports ping scanning (determine which hosts are up), many port scanning techniques, version detection (determine service protocols and application versions listening behind ports), and TCP/IP fingerprinting (remote host OS or device identification).</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">sudo apt-get install nmap
nmap -v -sT localhost</code></pre></figure>

</description>
    </item>
    
    
    
    <item>
      <title>How to fix Homebrew on Mac OS X Mavericks</title>
      <link>http://www.creativenightly.com/2013/10/How-to-fix-Homebrew-on-Mac-OSX-Mavericks/</link>
      <pubDate>Fri, 25 Oct 2013 00:00:00 +0100</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2013/10/How-to-fix-Homebrew-on-Mac-OSX-Mavericks</guid>
      <description><p>I’ve had lots of problems with homebrew since upgrading to Mavericks. The same problems also existed when trying to rbenv install and really anything else that compiles. The root cause of the issue ended up being a conflict Mountain Lion Command Line Tools and the ones provided by Maverick.</p>

<!--more-->

<p>There’s a chance you might be having various issues with homebrew after upgrading to OS X Mavericks. The root cause of the issue is a conflict with Mountain Lion Command Line Tools and the ones provided by Mavericks.</p>

<p>There is an simple solution to this. By running <code class="highlighter-rouge">xcode-select</code> (a tool that changes the path of the current active developer directory) it will fix the issue.</p>

<p>Open up the terminal and run:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">xcode-select --install</code></pre></figure>

<p>This will bring up a dialog to install the Command Line Tools (which you will have to type in your password) and your Homebrew issues shall be fixed!</p>
</description>
    </item>
    
    
    
    <item>
      <title>How to install Ruby 2.0.0 with RVM on OSX 10.8 Mountain Lion</title>
      <link>http://www.creativenightly.com/2013/03/How-to-install-ruby-2-0-0-on-OSX-Mountain-Lion/</link>
      <pubDate>Mon, 11 Mar 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2013/03/How-to-install-ruby-2-0-0-on-OSX-Mountain-Lion</guid>
      <description><p>If you’ve come across the any of the following errors while trying to install Ruby 2.0.0, you’ve come to the right place!</p>

<!--more-->

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">apple-gcc42 is not available <span class="k">in </span>PATH

Error running <span class="s1">'env GEM_PATH=/Users/KingScooty/.rvm/gems/ruby-2.0.0-p0:/Users/KingScooty/.rvm/gems/ruby-2.0.0-p0@global:/Users/KingScooty/.rvm/gems/ruby-2.0.0-p0:/Users/KingScooty/.rvm/gems/ruby-2.0.0-p0@global GEM_HOME=/Users/KingScooty/.rvm/gems/ruby-2.0.0-p0 /Users/KingScooty/.rvm/rubies/ruby-2.0.0-p0/bin/ruby /Users/KingScooty/.rvm/src/rubygems-2.0.2/setup.rb'</span>, please <span class="nb">read</span> /Users/KingScooty/.rvm/log/ruby-2.0.0-p0/rubygems.install.log

 ERROR:  Could not find a valid gem <span class="s1">'sass'</span> <span class="o">(</span>&gt;<span class="o">=</span> 0<span class="o">)</span>, here is why:
      Unable to download data from https://rubygems.org/ - SSL_connect <span class="nv">returned</span><span class="o">=</span>1 <span class="nv">errno</span><span class="o">=</span>0      <span class="nv">state</span><span class="o">=</span>SSLv3 <span class="nb">read </span>server key exchange B: bad ecpoint <span class="o">(</span>https://rubygems.org/latest_specs.4.8.gz<span class="o">)</span></code></pre></figure>

<p>The following should get you up and running with Ruby 2.0.0 in less than 5minutes!</p>

<p>You <em>must</em> install <strong>libyaml</strong> because Ruby 2.0.0 deprecated syck in favor of psych. I found that i also needed a variety of other packages during the install, so grab them too.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">rvm get stable

brew update

brew install libyaml
brew install pkg-config
brew install libxml2
brew install libxslt

brew install openssl
brew link openssl --force

brew install sqlite

brew install apple-gcc42

rvm install 2.0.0 --with-gcc<span class="o">=</span>gcc-4.2</code></pre></figure>

<h1 id="boom-">boom! :)</h1>
</description>
    </item>
    
    
    
    <item>
      <title>Visual tweaks and enhancements to improve workflow in Sublime Text</title>
      <link>http://www.creativenightly.com/2012/09/Visual-tweaks-to-improve-Sublime-Text-2-workflow/</link>
      <pubDate>Tue, 18 Sep 2012 00:00:00 +0100</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2012/09/Visual-tweaks-to-improve-Sublime-Text-2-workflow</guid>
      <description><p>Sublime Text is my editor of choice for an abundance of reasons, but one key reason is it’s customisability. I’m constantly tweaking settings to tailor Sublime Text to suit my personal taste. The following settings are my favourite ones.</p>

<!--more-->

<h3 id="improved-sidebar-with-sidebar-enhancements">1. Improved sidebar with Sidebar Enhancements</h3>

<p><a href="https://github.com/titoBouzout/SideBarEnhancements/">Sidebar Enhancements</a> enables various enhancements and right click options in the Sublime Text sidebar. Most notably, ‘<strong>move to trash</strong>’, ‘<strong>move</strong>’, ‘<strong>reveal</strong>’, ‘open with’.</p>

<p>Download the package <a href="https://github.com/titoBouzout/SideBarEnhancements/">here</a> and install it.</p>

<h3 id="see-git-diff-in-sublime-text-gutter-with-gitgutter">2. See git diff in Sublime Text gutter with GitGutter</h3>

<p>I only recently came across this plugin. Originally, i had to resort to <strong>git difftool</strong> everytime i wanted to inspect any changes to staged files – a rather cumbersome process.</p>

<p><img src="https://raw.github.com/jisaacks/GitGutter/master/screenshot.png" alt="screenshot" /></p>

<p>With <a href="https://github.com/jisaacks/GitGutter">GitGutter</a>, new lines, modified lines, and deleted lines all show up in the gutter of Sublime Text.</p>

<h3 id="change-the-caret-cursor-style">3. Change the caret (cursor) style</h3>

<p>There’s a few hidden settings for altering the caret style in Sublime Text 2. The default is <strong>blink</strong>, but we can make it gently fade in and out by entering the following into your config file (CMD + ,):</p>

<p><code class="highlighter-rouge">
"caret_style": "phase"
</code></p>

<p>There’s also a setting for making the caret wider, this is quite a useful feature when taking screenshots.</p>

<p><code class="highlighter-rouge">
"caret_style": "wide"
</code></p>

<h3 id="highlight-current-line">4. Highlight current line</h3>

<p>I’m a little surprised Sublime Text doesn’t enable this one by default – as i’m always losing my current position in a file when switching files – but nevertheless, to highlight the current line, enter the following into your config file:</p>

<p><code class="highlighter-rouge">
"highlight_line": true
</code></p>

<h3 id="show-folding-arrows">5. Show folding arrows</h3>

<p>Code folding is great, but half the time i forget the feature is even there! Not to mention i hate the time wasted waiting for the arrows to show up when i hover over the gutter.</p>

<p>To have the gutter arrows permanently visible, enter the following into your config file:</p>

<p><code class="highlighter-rouge">
"fade_fold_buttons": false
</code></p>

<h3 id="bold-folder-labels">6. Bold folder labels</h3>

<p>This is another visual cue that should be enabled by default. I find navigating the sidebar <strong>much</strong> easier when the folders are bold.</p>

<p><code class="highlighter-rouge">
"bold_folder_labels": true
</code></p>

<hr />

<p>Sound off in the comments if you know of any other tricks to improving user workflow in Sublime Text 2 :)</p>
</description>
    </item>
    
    
    
    <item>
      <title>Shopify for Designers - A Workshop by Keir Whitaker</title>
      <link>http://www.creativenightly.com/2012/07/Shopify-for-Designers-a-Workshop-by-Keir-Whitaker/</link>
      <pubDate>Mon, 30 Jul 2012 00:00:00 +0100</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2012/07/Shopify-for-Designers-a-Workshop-by-Keir-Whitaker</guid>
      <description><p>These are the notes i took from the Shopify for Designers workshop by <a href="http://twitter.com/keir">Keir Whitaker</a> in Birmingham on the 30th July 2012.</p>

<p><em>Apologies if they’re a bit of an incoherent mess, i was trying to type fast and listen simultaenously :)</em></p>

<!--more-->

<p>Keir was aproached to do some outreach for Shopify in the UK. <em>This workshop was free</em>, which was quite a nice touch, and also good advertising for the platform.</p>

<p>The following notes cover Shopify’s main features, what Shopify is good for, and what it’s bad for, Shopify’s file structure, the Liquid templating engine and some examples / helpful code snippets for various scenarios.</p>

<h4 id="shopify-site-examples">Shopify Site Examples:</h4>

<ul>
  <li><a href="http://abookapart.com">A Book Apart</a></li>
  <li><a href="http://unitedpixelworkers.com">United Pixel Workers</a>
    <ul>
      <li>Great custom checkout styles to override the ‘not so great’ Shopify default styles.</li>
    </ul>
  </li>
  <li><a href="http://hardgraft.com">Hard Graft</a>
    <ul>
      <li>Custom JavaScript interactive browsing experience.</li>
    </ul>
  </li>
  <li><a href="http://dodocase.com">Dodo Case</a></li>
</ul>

<p><strong>Slug</strong> term in Wordpress === <strong>Handle</strong> term in Shopify</p>

<p>Handles can allow for customised templates to be used to alter the experience on different pages.</p>

<h4 id="reserves-words">Reserves words:</h4>

<ul>
  <li>Products</li>
  <li>Collections</li>
  <li>Carts</li>
</ul>

<p>Image handling: Max size is 1024x1024.</p>

<h4 id="shopify-restrictions">Shopify Restrictions</h4>

<p>The only restriction is the <strong>Add to cart</strong> form location.</p>

<h4 id="product-variant-options">Product Variant Options</h4>

<p>Options for variants of the same product. e.g. T-shirts.</p>

<ul>
  <li>Colour</li>
  <li>Sizes</li>
</ul>

<h4 id="shopify-as-a-blogging-tool">Shopify as a Blogging Tool</h4>

<p>Shopify is not that great for blogging - it offers <em>basic</em> functionality for blogging. Best example of its use is for a Press page - small snippets of text explaining what’s new.</p>

<h4 id="javascript-customisation">JavaScript Customisation</h4>

<p>Powerful API tools to allow for customisating the browser experience e.g. Variant options, Collection sorting etc.</p>

<h4 id="collections">Collections</h4>

<ul>
  <li>Smart Collections - price, in stock, sold out (but a shipment is coming in)</li>
</ul>

<h4 id="partners-test-section">Partners Test Section</h4>

<p>Throws in all the functionality one would ever need from a shop. Allows users to start fiddling about with the platform without having to pay for a license.</p>

<h4 id="product-features--fields">Product features / fields</h4>

<ul>
  <li>Title</li>
  <li>URL &amp; Handle - <em>Similar to the permalink field in Wordpress</em></li>
  <li>WYSIWYG Editor</li>
  <li>Product properties / options
    <ul>
      <li>Product Type</li>
      <li>Vendor</li>
      <li>Size</li>
    </ul>
  </li>
  <li>Tags
    <ul>
      <li>Custom Collections
        <ul>
          <li>Year for Music (1999)</li>
          <li>Logical groupings for T-shirts
Collections</li>
        </ul>
      </li>
      <li>Front page collection to throw a product on the homepage.</li>
    </ul>
  </li>
  <li>Inventory
    <ul>
      <li>SKUS</li>
      <li>Weight</li>
    </ul>
  </li>
</ul>

<h4 id="collections-1">Collections</h4>

<ul>
  <li>Title</li>
  <li>Description</li>
</ul>

<p><em>0-Many relationship - Products can be in as many or as little as 0 collections.</em></p>

<h4 id="smart-collections">Smart Collections</h4>

<p>Filters to determine what’s in the selection - everything on sale in 1999 (product == sale in 1999).</p>

<h4 id="page">Page</h4>

<ul>
  <li>Template - page.FAQ, page.contact etc.</li>
</ul>

<h4 id="navigation">Navigation</h4>

<p>Custom nav lists equivalent to menus in Wordpress.</p>

<h4 id="bundles">Bundles</h4>

<ul>
  <li>Shopify Textmate Bundle - Allows you to edit and sync template files.</li>
  <li>Shopify Theme Tool - <em>In Beta so not available yet.</em></li>
</ul>

<h4 id="theme-structures">Theme Structures</h4>

<ul>
  <li>assets - <em>Basic dumping folder for stuff - <strong>No nesting folders acceptable</strong>.</em></li>
  <li>config - <em>Used to offer more control to client in admin section.</em></li>
  <li>layout
    <ul>
      <li>theme.liquid - <em>layout file - outerskin of the site e.g. base.html etc.</em></li>
    </ul>
  </li>
  <li>snippets - <em>include useful code snippets.</em></li>
  <li>templates
    <ul>
      <li>404.liquid</li>
      <li>article.liquid - <em>blog detail page</em></li>
      <li>blog.liquid</li>
      <li>cart.liquid</li>
      <li>collection.liquid</li>
      <li>index.liquid - <em>shop homepage</em></li>
      <li>page.liquid</li>
      <li>product.liquid</li>
      <li>search.liquid</li>
    </ul>
  </li>
</ul>

<h4 id="layouts">Layouts</h4>

<p>Useful for injecting content into a base template that contains default elements used site-wide like, header and footer.</p>

<p><code class="highlighter-rouge">important hook for header.
</code> injects content into base layout.</p>

<h2 id="liquid-templating-engine">Liquid Templating Engine</h2>

<h4 id="output">Output</h4>

<figure class="highlight"><pre><code class="language-django" data-lang="django">{{ product.title }}
{{ product.price }}</code></pre></figure>

<h4 id="filters">Filters</h4>

<p><em>What goes in at the beginning, comes out altered at the end.</em></p>

<figure class="highlight"><pre><code class="language-django" data-lang="django">{{ product.title | upcase }}
//Comes out as a string, turned into uppercase.

{{ 'logo.png' | asset_url | img_tag: 'Site Logo' }}
{{ 'style.css' | asset_url | stylesheet_tag }}</code></pre></figure>

<h4 id="logic">Logic</h4>

<figure class="highlight"><pre><code class="language-django" data-lang="django">{% if product.available %}
Show Add to cart button here
{% else %}
Display message about when the product will be next available
{% endif %}

{% cycle 'one', 'two' %}
{% cycle 'one', 'two' %}
{% cycle 'one', 'two' %}

// one
// two
// one

// Operators == != &gt; &lt; &gt;= &lt;= or and

{% case handle %}
{% when 'cake' %}
This is a cake
{% else %}
This is not a cake
{% endcase %}</code></pre></figure>

<h4 id="loops">Loops</h4>

<figure class="highlight"><pre><code class="language-django" data-lang="django">{% for image in product.images %}

{% if forloop.first %}

//Large first image.

{% else %}

//Small images for remaining items.

{% endif %}
{% endfor %}</code></pre></figure>

<h2 id="templates">Templates</h2>

<h4 id="variables">Variables</h4>

<p>List of variables here on the <a href="http://wiki.shopify.com/Product.variables">wiki page</a>.</p>

<h4 id="collection-pagination">Collection pagination</h4>

<figure class="highlight"><pre><code class="language-django" data-lang="django">{% paginate collection.products by 12 %}

{% if collection.products.size == 0 %}

	&lt;h1&gt;No products, baby!&lt;/h1&gt;

{% else %}

//Show products

{% if paginate.pages &gt; 1 %}

	{{ paginate | default_pagination }}

{% endif %}</code></pre></figure>

<h4 id="feature-collections">Feature Collections</h4>

<p>Show products on homepage:</p>

<figure class="highlight"><pre><code class="language-django" data-lang="django">{% for product in collections.frontpage.products limit:3 %}
	//Show some products
{% endfor %}</code></pre></figure>

<p>Special offers:</p>

<figure class="highlight"><pre><code class="language-django" data-lang="django">{% assign article = pages.frontpage %} //Assign variable by grabbing data from a page
{% if article.content != '' %}
	//Show some front page articles by injecting page data
{% endif %}</code></pre></figure>

<h4 id="theme-settings">Theme Settings</h4>

<p>Done by assiging variables to to name parameter on markup.</p>

<p><code class="highlighter-rouge">name="text_color"</code></p>

<h4 id="cssliquid---dynamic-css">CSS.liquid - Dynamic CSS</h4>

<figure class="highlight"><pre><code class="language-django" data-lang="django">body {
	color: {{ settings.text_color }};
	background-color: {{ settings.bg_color }};
}</code></pre></figure>

<h4 id="alternate-layouts">Alternate Layouts</h4>

<figure class="highlight"><pre><code class="language-django" data-lang="django">{% layout bacon.liquid %}</code></pre></figure>

<h4 id="cartjs---cart-json-for-sweet-js-customisation">Cart.js - cart JSON for sweet JS customisation</h4>

<p>Going to <code class="highlighter-rouge">/cart.js</code> on a Shopify front end will give you access to a JSON file of the clients cart - nice for JavaScript dev customisation.</p>

<h4 id="alternate-add-to-cart-methods">Alternate “Add to Cart” methods</h4>

<p>Cart Permalinks - use URLS to add items to a cart.</p>

<h2 id="the-shopify-cheat-sheet">The Shopify cheat sheet</h2>

<p>The shopify cheat sheet is a fantastic little resource to have open when using Shopify’s liquid templating engine.</p>

<p><a href="http://cheat.markdunkley.com">Shopify Cheat Sheet</a></p>
</description>
    </item>
    
    
    
    <item>
      <title>Sublime Text 2 Theme Package Management</title>
      <link>http://www.creativenightly.com/2012/07/Sublime-Text-2-Theme-Package-Management/</link>
      <pubDate>Thu, 12 Jul 2012 00:00:00 +0100</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2012/07/Sublime-Text-2-Theme-Package-Management</guid>
      <description><p>Most devs are familiar with installing software packages on their systems via package managers, but did you know, if you’re using <a href="http://www.sublimetext.com/2">Sublime Text 2</a>, you can do the same with your text editor too?</p>

<!--more-->

<h2 id="sublime-package-control">Sublime Package Control</h2>

<p><a href="http://twitter.com/wbond">Will Bond</a> has created a delightful tool for managing packages; packages can include syntax highlighters for preprocessors such as LESS.</p>

<h3 id="installation">Installation</h3>

<p>Installation of the Sublime Text 2 Package Manager is done through the Sublime Text console. This is accessed via the <strong>ctrl+`</strong> shortcut. Once open, paste the following command into the console:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">import urllib2,os; <span class="nv">pf</span><span class="o">=</span><span class="s1">'Package Control.sublime-package'</span>; <span class="nv">ipp</span><span class="o">=</span>sublime.installed_packages_path<span class="o">()</span>; os.makedirs<span class="o">(</span>ipp<span class="o">)</span> <span class="k">if </span>not os.path.exists<span class="o">(</span>ipp<span class="o">)</span> <span class="k">else </span>None; urllib2.install_opener<span class="o">(</span>urllib2.build_opener<span class="o">(</span>urllib2.ProxyHandler<span class="o">()))</span>; open<span class="o">(</span>os.path.join<span class="o">(</span>ipp,pf<span class="o">)</span>,<span class="s1">'wb'</span><span class="o">)</span>.write<span class="o">(</span>urllib2.urlopen<span class="o">(</span><span class="s1">'http://sublime.wbond.net/'</span>+pf.replace<span class="o">(</span><span class="s1">' '</span>,<span class="s1">'%20'</span><span class="o">))</span>.read<span class="o">())</span>; print <span class="s1">'Please restart Sublime Text to finish installation'</span></code></pre></figure>

<h2 id="installing-a-package">Installing a package</h2>

<p>Let’s go ahead and install a package or two to demonstrate just how easy it is.</p>

<h3 id="less-syntax-highlighter">LESS syntax highlighter</h3>

<p>After you have installed Package Control, restart Sublime Text 2 and bring up the Command Palette (<code class="highlighter-rouge">Command+Shift+p</code> on OS X, <code class="highlighter-rouge">Control+Shift+p</code> on Linux/Windows). Select Package Control: Install Package; wait while Package Control fetches the latest package list; type in LESS when the list appears, then hit enter to install.</p>

<h3 id="sublime-text-themes--colour-schemes">Sublime Text Themes / Colour Schemes</h3>

<p>Bring up the Command Palette again (<code class="highlighter-rouge">Command+Shift+p</code> <em>or</em> <code class="highlighter-rouge">Control+Shift+p</code>) and goto Install Package. Search for <strong>Dayle Rees Color Schemes</strong> and hit enter to install.</p>

<p>Goto <strong>Preferences -&gt; Color Scheme</strong> to select your new colour scheme.</p>

<p>Simples!</p>

</description>
    </item>
    
    
    
    <item>
      <title>Setting up a Mac on OS X 10.8 as a dev machine from scratch</title>
      <link>http://www.creativenightly.com/2012/06/Setting-up-a-mac-as-a-dev-machine/</link>
      <pubDate>Fri, 29 Jun 2012 00:00:00 +0100</pubDate>
      <author></author>
      <guid>http://www.creativenightly.com/2012/06/Setting-up-a-mac-as-a-dev-machine</guid>
      <description><p>Originally, these were the notes I took down when setting up the development environment on my new MacBook Air in June 2012, but it’s now become a step by step guide to setting up a full development stack on Mac OS X 10.8 Mountain Lion. I’ll aim to keep this post up to date with the latest dev environments/workflows as new tools are released in order to setup the leanest/efficient development machine possible.</p>

<!--more-->

<p>The only prerequisite is an <strong>up-to-date install of OS X 10.8 Mountain Lion</strong>.</p>

<hr />

<ol>
  <li><a href="#1">Install Homebrew</a></li>
  <li><a href="#2">Install Git</a></li>
  <li><a href="#3">Install RVM</a>
    <ul>
      <li><a href="#3.2">Install Ruby</a></li>
      <li><a href="#3.3">Install Sass</a></li>
      <li><a href="#3.3">Install Compass</a></li>
    </ul>
  </li>
  <li><a href="#4">Install Node</a>
    <ul>
      <li><a href="#4.1">Install Yeoman</a></li>
    </ul>
  </li>
  <li><a href="#5">Install MySQL</a></li>
  <li><a href="#6">Install CouchDB</a></li>
  <li><a href="#7">Configure Apache</a>
    <ul>
      <li><a href="#7.2">Setup Virtual Hosts</a></li>
    </ul>
  </li>
</ol>

<hr />

<h5 id="using-sublime-text-2-from-the-command-line">Using Sublime Text 2 from the Command Line</h5>
<p>Before we begin, i’d recommend enabling Sublime Text 2 Command Line support as, for some reason, this isn’t available out of the box.</p>

<p>To setup the command line functionality, type the following into the terminal.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">sudo ln -s <span class="s2">"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl"</span> /usr/bin/subl</code></pre></figure>

<hr />

<h2 id="a-id1a-1-homebrew"><a id="1"></a> 1. Homebrew:</h2>

<h3 id="requirements">1.1 Requirements:</h3>

<p>Homebrew has two dependencies: <strong>XQuartz</strong>, and <strong>Xcode</strong>*.</p>

<p><em>It’s a common delusion that the entire 2.8gb install of Xcode is required, however, the only part of Xcode Homebrew requires, is the <strong>Command Line Tools</strong>.</em></p>

<h4 id="xquartz">XQuartz</h4>

<p>As of the 26th July 2012, Apple has dropped X11 from its OS. OS X Mountain Lion does not come bundled with X11, and instead, Apple recommend developers install the more up to date open source XQuartz project, which it will continue to support.</p>

<p><a href="http://xquartz.macosforge.org/landing/">Download XQuartz here</a> then install it, log out, then log back in.</p>

<h4 id="command-line-tools">Command Line Tools</h4>

<p>Homebrew requires Xcode to be installed in order to work, but Xcode is massively bloated for what is actually required by homebrew to build apps.</p>

<p><a href="https://github.com/kennethreitz/osx-gcc-installer/">OSX-GCC-Installer</a> by <a href="http://kennethreitz.com/">Kenneth Reitz</a> was a way round this bloat, but lacked the 10.6/7 SDKs due to licensing restrictions. Apple, however, took interest in this project and were keen to ship something official.</p>

<p>Thus, Apple announced the <strong>Command Line Tools for Xcode</strong>. It’s a 171 MB download that includes all of the tools Homebrew should ever need. Plus, Homebrew officially supports this package.</p>

<p><strong><a href="http://developer.apple.com/downloads">Download the Command Line Tools for Xcode here</a> and install it.</strong></p>

<h3 id="installing-homebrew">1.2 Installing Homebrew:</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">ruby -e <span class="s2">"</span><span class="k">$(</span>curl -fsSL https://raw.github.com/mxcl/homebrew/go<span class="k">)</span><span class="s2">"</span></code></pre></figure>

<p>The script installs Homebrew to <code class="highlighter-rouge">/usr/local</code> so that you don’t need sudo when you brew install.</p>

<p>It’s bad practice to install packages using sudo.</p>

<hr />

<blockquote>
  <p>Packages can run arbitrary scripts, which makes sudoing a package manager command as safe as a chainsaw haircut. Sure, it’s fast and definitely going to cut through any obstacles, but you might actually want that obstacle to stay there. <a href="http://howtonode.org/introduction-to-npm">— Isaac Z. Schlueter</a></p>
</blockquote>

<hr />

<h3 id="changing-ownership-of-usrlocal">1.3 Changing ownership of usr/local:</h3>

<p>This step isn’t required for brew, but since we’re on the subject of sudo, i recommend changing ownership of <code class="highlighter-rouge">/usr/local</code> from <code class="highlighter-rouge">root</code> to <code class="highlighter-rouge">$user</code>. This will benefit you when using node’s package manager, and will mean you won’t have to use sudo when installing into <code class="highlighter-rouge">/usr/local</code>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">sudo chown -R <span class="nv">$USER</span> /usr/local</code></pre></figure>

<p>There is a massive debate about chown-ing <code class="highlighter-rouge">/usr/local</code>, and i agree with <a href="https://gist.github.com/579814#gistcomment-28563">Isaacs comments here</a>.</p>

<hr />

<h2 id="a-id2a-20-git"><a id="2"></a> 2.0 Git:</h2>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">brew install git</code></pre></figure>

<p>Next, to setup git. Run the following commands in the Terminal.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git config --global user.name <span class="s2">"Your Full Name"</span>
git config --global user.email <span class="s2">"Your Email Address"</span></code></pre></figure>

<p>Make sure you use the same email address for Git, GitHub, and Heroku.</p>

<hr />

<h2 id="a-id3a-30-rvm"><a id="3"></a> 3.0 RVM:</h2>

<p>RVM stands for Ruby Version Manager. It’s a command line tool which allows you to easily install, manage, and work with multiple ruby environments from interpreters to sets of gems. It also installs gems to your <code class="highlighter-rouge">~/</code> <strong>home</strong> directory, instead of using the global root of your machine.</p>

<h4 id="rvm-helps-improve-security">RVM helps improve security</h4>

<p>RVM helps ensure that all aspects of Ruby are completely contained within user space, strongly encouraging safer, non-root use. Use of RVM rubies thus provides a higher level of system security, and therefore reduces risk and cuts overall system downtime. Additionally, since all processes run at the user level, a compromised ruby process cannot compromise the entire system.</p>

<h4 id="say-goodbye-to-sudo-gem-installs">Say goodbye to sudo gem installs</h4>

<p>Yep, that’s right! By using RVM, you won’t have to <code class="highlighter-rouge">sudo</code> to install gems on your machine.</p>

<h3 id="install-the-stable-release-version">3.1 Install the stable release version:</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">curl -L https://get.rvm.io | bash -s stable</code></pre></figure>

<p>Finish the installation by either running the following command, or closing all shell windows.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source</span> /Users/USERNAME/.rvm/scripts/rvm</code></pre></figure>

<p><em>Replace <strong>username</strong> with your Mac username.</em></p>

<p>Before installing the latest version of ruby with rvm, we need to install <code class="highlighter-rouge">libksba</code>.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">brew install libksba</code></pre></figure>

<h3 id="a-id32a-32-then-install-ruby-193-with"><a id="3.2"></a> 3.2 Then install Ruby 1.9.3 with:</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">rvm install 1.9.3</code></pre></figure>

<h3 id="a-id33a-now-install-sass-and-compass"><a id="3.3"></a> Now install <strong>Sass</strong> and <strong>Compass</strong>.</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">gem install sass
gem install compass</code></pre></figure>

<hr />

<h2 id="a-id4a-40-node"><a id="4"></a> 4.0 Node:</h2>

<p>According to the node docs, Brew installs of node are known to be buggy, the node package manager is not included in the install etiher, so the node devs themselves reccommend using the Macintosh package installer:</p>

<p><a href="http://nodejs.org/#download">Download the Node Macintosh package installer</a></p>

<h5 id="note-8th-feb-2013">Note (8th Feb 2013):</h5>

<p>Node devs recently made some changes so that Node no longer installs on OS X via homebrew if Xcode is <strong>not</strong> installed. We haven’t installed Node via homebrew, however this issue <em>still</em> affects us.</p>

<p>Next time you run <strong>npm install</strong> you may come across the following error:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">xcode-select: Error: No Xcode is selected. Use xcode-select -switch &lt;path-to-xcode&gt;, or see the xcode-select manpage <span class="o">(</span>man xcode-select<span class="o">)</span> <span class="k">for </span>further information.</code></pre></figure>

<p>To fix this, all you need to do is:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">sudo xcode-select --switch /usr/bin</code></pre></figure>

<h3 id="a-id41a-41-yeoman"><a id="4.1"></a> 4.1 Yeoman</h3>

<p>Yeoman is a robust and opinionated set of tools, libraries, and a workflow that can help developers quickly build beautiful, compelling web apps. Tools included are, <strong>Yo</strong> (a scaffolding tool), <strong>Grunt</strong>, <strong>Bower</strong> and more.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">npm install -g yo grunt-cli bower</code></pre></figure>

<hr />

<h2 id="a-id5a-50-mysql"><a id="5"></a> 5.0 MySQL:</h2>

<h4 id="sidenote---debugging--path-issues">Sidenote - Debugging / $PATH issues</h4>

<p>I actually had a few issues at this point with my new MacBook air and had to roll back the install of MySQL in order to fix a few issues…</p>

<p>I ran <code class="highlighter-rouge">brew doctor</code> to discover that <code class="highlighter-rouge">/usr/bin</code> was ahead of <code class="highlighter-rouge">/usr/local/bin</code> in my $PATH.</p>

<p>In order to get round this, i needed to edit <code class="highlighter-rouge">/etc/paths</code> to fix the order.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">subl /etc/paths</code></pre></figure>

<p><em>This isn’t a file i recommend playing with often. However, i’ve mentioned it here, as it might come in handy to people needing to do a little DIY machine debugging.</em></p>

<p>Opening a new terminal window and running <code class="highlighter-rouge">brew doctor</code> again should confirm this.</p>

<hr />

<h3 id="install">5.1 Install</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">brew install mysql</code></pre></figure>

<p>You’re then requried to setup a few things. Run the following commands:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">unset </span>TMPDIR
mysql_install_db --verbose --user<span class="o">=</span><span class="sb">`</span>whoami<span class="sb">`</span> --basedir<span class="o">=</span><span class="s2">"</span><span class="k">$(</span>brew --prefix mysql<span class="k">)</span><span class="s2">"</span> --datadir<span class="o">=</span>/usr/local/var/mysql --tmpdir<span class="o">=</span>/tmp</code></pre></figure>

<p>Followed by the following: <strong><em>(you might also need to restart your machine to fix a conflict with Lion’s copy of MySQL.)</em></strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">mysql.server start</code></pre></figure>

<p>Then use the alternative security script:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">/usr/local/Cellar/mysql/5.5.25a/bin/mysql_secure_installation</code></pre></figure>

<p>Boom!</p>

<hr />

<h2 id="a-id6a-60-couchdb"><a id="6"></a> 6.0 CouchDB:</h2>

<p>CouchDB is a popular NoSQL database.</p>

<p><em>If you’re not planning on developing node apps with persistent storate, <strong>you can skip this step</strong>.</em></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">brew install couchdb</code></pre></figure>

<hr />

<h2 id="a-id7a-70-configuring-apache-and-virtual-hosts"><a id="7"></a> 7.0 Configuring Apache and Virtual Hosts:</h2>

<p>Type the following command in to edit the <code class="highlighter-rouge">httpd.conf</code> file in Sublime Text.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">subl /etc/apache2/httpd.conf</code></pre></figure>

<h3 id="enable-php5">7.1 Enable PHP5</h3>

<p>Find <code class="highlighter-rouge">line 111</code> and un-comment:</p>

<figure class="highlight"><pre><code class="language-apacheconf" data-lang="apacheconf">LoadModule php5_module libexec/apache2/libphp5.so</code></pre></figure>

<h3 id="a-id72a-72-enable-virtual-hosts"><a id="7.2"></a> 7.2 Enable Virtual Hosts</h3>

<p>Find and uncomment the following line. It can be found around <code class="highlighter-rouge">line 623</code>.</p>

<figure class="highlight"><pre><code class="language-apacheconf" data-lang="apacheconf">Include /private/etc/apache2/extra/httpd-vhosts.conf</code></pre></figure>

<h3 id="creating-a-virtual-hosts-file">7.3 Creating a Virtual Hosts File</h3>

<p>You then want to create a vhosts file, to store all your virtual hosts in. So enter the following commands in the Terminal.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">touch /etc/apache2/other/vhosts.conf
subl /etc/apache2/other/vhosts.conf</code></pre></figure>

<p>And enter the following:</p>

<figure class="highlight"><pre><code class="language-apacheconf" data-lang="apacheconf">#
# Virtual Hosts
#
NameVirtualHost *:80

#
# VirtualHost example:
# Almost any Apache directive may go into a VirtualHost container.
# The first VirtualHost section is used for all requests that do not
# match a ServerName or ServerAlias in any &lt;VirtualHost&gt; block.
#
&lt;VirtualHost *:80&gt;
    DocumentRoot "/Users/USERNAME/Sites/SITENAME"
    ServerAlias dev.*.xip.io
    ServerName dev.foo
&lt;/VirtualHost&gt;</code></pre></figure>

<p>Change <strong>username</strong>, <strong>sitename</strong>, <strong>dev</strong>, and <strong>dev.foo</strong> accordingly, and save the file.</p>

<h3 id="pointing-localhost-to-a-virtual-host-server-name">7.4 Pointing Localhost to a Virtual Host Server Name</h3>

<p>Now we need to point localhost to the server name, in order to enable the virtual host.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">subl /etc/hosts</code></pre></figure>

<p>And enter the following on a new line and save:</p>

<figure class="highlight"><pre><code class="language-apacheconf" data-lang="apacheconf">#servername to match that in the vhosts.conf file
127.0.0.1   dev.foo</code></pre></figure>

<h3 id="restart-apache-and-lock-n-load">7.5 Restart Apache, and Lock ‘N’ Load!</h3>

<p>Lastly in <code class="highlighter-rouge">System Settings</code> disable and re-enable <code class="highlighter-rouge">Web Sharing</code> in the <code class="highlighter-rouge">Sharing</code> panel.</p>

<p>Fire up your favourite web browser and enter the servername, you should be pointed to the doc root you entered in your vhosts file!</p>

<p>Neat, eh!</p>

<p>Now, there are plenty more options you can set for logs etc, but i’ll leave that out as not to over complicate this article.</p>

<hr />

<h2 id="remaining-packages">8.0 Remaining packages:</h2>

<p>There are a lot more packages that can be installed, and need less configuration than the ones mentioned above. I’ve put these in a .dotfile you can <a href="https://raw.github.com/KingScooty/dotfiles/master/.brew">download here</a>, and can be batch executed calling:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">./.brew</code></pre></figure>

<hr />

</description>
    </item>
    
    

  </channel>
</feed>
